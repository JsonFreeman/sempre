main() {
  Grammar.read {
    253 rules
  }
  Parser: 42 catUnaryRules (sorted), 211 nonCatUnaryRules (in trie)
  Dataset.read {
    Reading data/taxes.examples {
      Example data/taxes.examples:0 (0): [if, form, 1040, ,, line, 75, `, overpaidamt, ', has, a, non, zero, value, and, line, 79, `, espenaltyamt, ', is, greater, than, line, 75, `, overpaidamt, ', ,, then, line, 78, `, owedamt, ', must, have, a, non, zero, value, .] => (string "non_zero( overpaidAmt ) & greater_than( esPenaltyAmt,overpaidAmt ) & ~non_zero( owedAmt )")
      Example data/taxes.examples:1 (1): [if, form, 1040, ,, line, 75, `, overpaidamt, ', has, a, non, zero, value, and, line, 79, `, espenaltyamt, ', is, less, than, or, equal, to, line, 75, `, overpaidamt, ', ,, then, line, 78, `, owedamt, ', must, be, equal, to, zero, if, an, amount, is, entered, .] => (string "non_zero( overpaidAmt ) & less_than_equal_to( esPenaltyAmt,overpaidAmt ) & has_value( owedAmt ) & non_zero( owedAmt )")
      Example data/taxes.examples:2 (2): [if, form, 1040, ,, line, 4, checkbox, head] => (string "value( individualReturnFilingStatusCd,4 ) & ~( ( has_value( qualifyingHOHNm )  & has_value( qualifyingHOHSSN ) )\n                                                                        | has_value( chldWhoLivedWithYouCnt )\n                                                                        | has_value( otherDependentsListedCnt ) )")
      Example data/taxes.examples:3 (3): [if, form, 1040, ,, line, 4, checkbox, head] => (string "value( individualReturnFilingStatusCd,4 ) & has_value ( qualifyingHOHNm )  & ~has_value( qulifyingHOHSSN )")
      Example data/taxes.examples:4 (4): [if, form, 1040, ,, line, 4, `, qualifyinghohssn, ', has, a, value, ,, then, it, cannot, be, equal, to, the, primary, ssn, or, the, spouse, ssn, in, the, return, header, .] => (string "has_value( qualifyingHOHSSN ) & ( same( qualifyingHOHSSN,primarySSN ) | same( qualifyingHOHSSN,spouseSSN ) )")
      Example data/taxes.examples:5 (5): [if, form, 1040, ,, line, 4, `, qualifyinghohssn, ', has, a, value, ,, then, it, must, be, within, the, valid, range, of, ssn/itin/atin, .] => (string "has_value( qualifyingHOHSSN ) & ~validSSN( qualifyingHOHSSN )")
      Example data/taxes.examples:6 (6): [if, form, 1040, ,, line, 2, checkbox, married] => (string "value( individualReturnFilingStatusCd,2 ) &  ~( has_value( primarySSN ) & has_value( spouseSSN,X ) )")
      Example data/taxes.examples:7 (7): [if, form, 1040, ,, line, 3, checkbox, married] => (string "value( individualReturnFilingStatusCd,3 ) & has_value( exemptSpouseInd ) &  ~( has_value( primarySSN ) & has_value( spouseSSN ) )")
      Example data/taxes.examples:8 (8): [if, form, 1040, ,, line, 4, checkbox, head] => (string "value( individualReturnFilingStatusCd,4 ) & has_value( exemptSpouseInd ) & ~( has_value( primarySSN ) & has_value( spouseSSN ) )")
      Example data/taxes.examples:9 (9): [each, `, dependentssn, ', that, has, a, value, on, form, 1040, ,, line, 6c(, 2, ), must, be, within, the, valid, range, of, ssn/itin/atin, .] => (string "has_value( depSSN( I ) ) & ~validSSN( depSSN( I ) )")
      Example data/taxes.examples:10 (10): [form, 1040, ,, line, 6c(, 2, ), ,, each, `, dependentssn, ', provided, must, be, unique, among, all, the, dependent, ssns, in, line, 6c(, 2, ), .] => (string "has_value( depSSN( I ) ) & has_value( depSSN( J ) ) & same( depSSN( I ),depSSN( J ) )")
      Example data/taxes.examples:11 (11): [form, 1040, ,, line, 6c(, 2, ), ,, each, `, dependentssn, ', provided, must, not, be, the, same, as, the, `, primaryssn, ', or, the, `, spousessn, ', in, the, return, header, .] => (string "has_value( depSSN( I ) ) & ( same( depSSN( I ),primarySSN ) | same( depSSN( I ),spouseSSN ) )")
      Example data/taxes.examples:12 (12): [if, form, 1040, ,, line, 66a, `, eiceligibilityliteralcd, ', has, the, value, `, no, ', ,, then, line, 66a, `, earnedincomecreditamt, ', must, be, equal, to, zero, or, not, be, present, .] => (string "value( eICEligibilityLiteralCd,NO ) & non_zero( earnedIncomeCreditAmt ) & has_value( earnedIncomeCreditAmt )")
      Example data/taxes.examples:13 (13): [if, schedule, eic, (, form, 1040, ), is, present, in, the, return, ,, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', must, have, a, non, zero, value, .] => (string "has_value ( scheduleEIC ) & ~non_zero ( earnedIncomeCreditAmt )")
      Example data/taxes.examples:14 (14): [if, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', has, a, non, zero, value, ,, then, at, least, one, of, the, following, must, be, true:, (, 1, ), in, [, wagesnotshownschedule, ], attached, to, form, 1040, ,, line, 7, ,, at, least, one, `, wagesliteralcd, ', must, have, the, value, hsh, and, the, corresponding, `, wagesnotshownamt, ', must, be, greater, than, zero;, (, 2, ), [, otherincometypestatement, ], must, be, attached, to, form, 1040, ,, line, 21;, (, 3, ), form, w-2, must, be, present;, (, 4, ), form, 1099, r, must, be, present;, (, 5, ), schedule, c, (, form, 1040, ), must, be, present;, (, 6, ), schedule, e, (, form, 1040, ), ,, line, 28(, b, ), `, partnershipscorpcd, ', must, have, the, value, p, for, at, least, one, entry, in, line, 28;, (, 7, ), schedule, f, (, form, 1040, ), must, be, present;, (, 8, ), schedule, c, ez, (, form, 1040, ), must, be, present;, (, 9, ), form, 8919, must, be, present;, (, 10, ), in, [, wagesnotshownschedule, ], attached, to, form, 1040, ,, line, 7, ,, at, least, one, `, wagesliteralcd, ', must, have, the, value, fec, with, the, corresponding, `, wagesnotshownamt, ', having, a, value, greater, than, zero, and, [, fecrecord, ], must, be, present, .] => (string "non_zero( earnedIncomeCreditAmt )              & ~ (  (  value ( wagesLiteralCd( I ), hsh ) & greater_than ( wagesNotShownAmt( I ),0 ) )|\n                                                                                   has_value( otherIncomeTypeStatement ) |\n                                                                                   has_value( w2 ) |\n                                                                                   has_value( form1099R ) |\n                                                                                   has_value( scheduleC ) |\n                                                                                   has_value( form8919 )  |\n                                                                                  ( value ( wagesLiteralCd( J ),fec ) &  greater_than( wagesNotShownAmt( J ),0 ) &\n                                                                                     has_value( fECRecord ) ) )")
      Example data/taxes.examples:15 (15): [if, form, 1040, ,, line, 8a, `, taxableinterestamt, ', is, greater, than, 1500, ,, then, it, must, be, equal, to, schedule, b, (, form, 1040, ), ,, line, 4, `, calculatedtotaltaxableintamt, ', unless, form, 8958, is, present, in, the, return, .] => (string "greater_than( taxableInterestAmt,1500 ) &  ~has_value( form8958 ) & ~same( taxableInterestAmt,calculatedTotalTaxableIntAmt )")
      Example data/taxes.examples:16 (16): [if, form, 1040, ,, line, 9a, `, ordinarydividendsamt, ', is, greater, than, 1500, ,, then, it, must, be, equal, to, schedule, b, (, form, 1040, ), ,, line, 6, `, totalordinarydividendsamt, ', unless, form, 8958, is, present, in, the, return, .] => (string "greater_than( ordinaryDividendsAmt,1500 ) &  ~has_value( form8958 ) & ~same( ordinaryDividendsAmt,totalOrdinaryDividendsAmt )")
      Example data/taxes.examples:17 (17): [if, schedule, a, (, form, 1040, ), is, present, in, the, return, ,, then, form, 1040, ,, line, 40, `, totalitemizedorstandarddedamt, ', must, be, equal, to, schedule, a, (, form, 1040, ), ,, line, 29, `, totalitemizeddeductionsamt, ', .] => (string "has_value( scheduleA ) & ~same( totalItemizedOrStandardDedAmt,totalItemizedDeductionsAmt )")
      Example data/taxes.examples:18 (18): [form, 1040, ,, line, 49, `, creditforchildanddepdcareamt, ', must, be, equal, to, form, 2441, ,, line, 11, `, creditforchildanddepdcareamt, ', .] => (string "~same( creditForChildAndDepdCareAmt,form2441Line11CreditForChildAndDepdCareAmt )")
      Example data/taxes.examples:19 (19): [if, form, 1040, ,, line, 73, `, overpaidamt, ', is, greater, than, line, 77, `, espenaltyamt, ', ,, then, the, sum, of, line, 74a, `, refundamt, ', ,, line, 75, `, appliedtoestaxamt, ', ,, and, line, 77, `, espenaltyamt, ', must, be, equal, to, line, 73, `, overpaidamt, ', .] => (string "greater_than( overpaidAmt,esPenaltyAmt ) & ~plus( refundAmt,appliedToEsTaxAmt,esPaneltyAmt,overpaidAmt )")
      Example data/taxes.examples:20 (20): [if, form, 1040, ,, line, 75, `, overpaidamt, ', is, greater, than, zero, and, less, than, line, 79, `, espenaltyamt, ', ,, then, (, line, 76a, `, refundamt, ', and, line, 77, `, appliedtoestaxamt, ', must, be, equal, to, zero, if, an, amount, is, entered, ), and, [, line, 78, `, owedamt, ', must, be, equal, to, (, line, 79, `, espenaltyamt, ', minus(, -, ), line, 75, `, overpaidamt, ', ), ], .] => (string "greater_than( overpaidAmt,0 ) & greater_than( esPaneltyAmt,overpaidAmt ) & ~( same( refundAmt,0 ) & same( appliedToEsTaxAmt,0 ) & minus( esPenaltyAmt,overpaidAmt,owedAmt ) )")
      Example data/taxes.examples:21 (21): [if, form, 1040, ,, line, 31a, `, totalalimonypaidamt, ', has, a, non, zero, value, ,, then, there, must, be, at, least, one, `, recipientssn, ', provided, on, line, 31b, .] => (string "has_value( totalAlimonyPaidAmt ) &  ~has_value( recipientSSN( I ) )")
      Example data/taxes.examples:22 (22): [each, `, recipientssn, ', that, has, a, value, on, form, 1040, ,, line, 31b, must, be, within, the, valid, range, of, ssn/itin, and, must, not, be, an, atin, .] => (string "~validSSN( recepientSSN( I ) ) & aTIN( recepientSSN( I ) )")
      Example data/taxes.examples:23 (23): [each, `, recipientssn, ', provided, on, form, 1040, ,, line, 31b, must, not, be, the, same, as, `, primaryssn, ', in, the, return, header, .] => (string "same( recepientSSN( I ),primarySSN )")
      Example data/taxes.examples:24 (24): [if, form, 1040, ,, line, 13, checkbox, `, capitaldistributionind, ', is, checked, ,, then, schedule, d, (, form, 1040, ), must, not, be, present, in, the, return, .] => (string "has_value( capitalDistributionInd ) & has_value( ScheduleD )")
      Example data/taxes.examples:25 (25): [if, form, 1040, ,, line, 13, checkbox, `, capitaldistributionind, ', is, not, checked, and, line, 13, `, capitalgainlossamt, ', has, a, non, zero, value, ,, then, schedule, d, (, form, 1040, ), must, be, attached, .] => (string "~has_value( capitalDistributionInd ) & non_zero( capitalGainLossAmt ) & ~has_value( ScheduleD )")
      Example data/taxes.examples:26 (26): [if, any, of, the, following, form, 1040, fields, have, a, value, ,, then, all, of, these, fields, must, have, a, value:, line, 76b, `, routingtransitnum, ', ,, line, 76c, `, bankaccounttypecd, ', ,, line, 76d, `, depositoraccountnum, ', .] => (string "( has_value( routingTransitNum ) & ~has_value( bankAccountTypeCd ) | ~has_value( depositorAccountNum ) ) |\n                              ( has_value( bankAccountTypeCd ) & ~has_value( routingTransitNum ) | ~has_value( depositorAccountNum ) ) |\n                              ( has_value( depositAccountNum ) & ~has_value( routingTransitNum ) | ~has_value( bankAccountTypeCd ) )")
      Example data/taxes.examples:27 (27): [if, form, 1040, ,, line, 75, `, overpaidamt, ', has, a, non, zero, value, ,, then, line, 74, `, totalpaymentsamt, ', must, be, greater, than, line, 63, `, totaltaxamt, ', .] => (string "non_zero( overpaidAmt ) & ~greater_than( totalPaymentsAmt,totalTaxAmt )")
      Example data/taxes.examples:28 (28): [if, `, primaryssn, ', in, the, return, header, is, an, itin, ,, then, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', must, be, equal, to, zero, if, an, amount, is, entered, .] => (string "iTin( primarySSN ) & non_zero( earnedIncomeCreditAmt )")
      Example data/taxes.examples:29 (29): [if, `, primaryssn, ', in, the, return, header, is, an, itin, ,, then, schedule, eic, (, form, 1040a, or, 1040, ), must, not, be, present, in, the, return, .] => (string "iTIN( primarySSN ) & has_value( formScheduleEIC )")
      Example data/taxes.examples:30 (30): [if, form, 1040, ,, line, 2, checkbox, married] => (string "value( individualReturnFilingStatusCd,2 )  & iTIN( spouseSSN ) & non_zero( earnedIncomeCreditAmt )")
      Example data/taxes.examples:31 (31): [if, form, 1040, ,, line, 2, checkbox, married] => (string "value( individualReturnFilingStatusCd,2 )  & iTIN( spouseSSN ) & has_value( formScheduleEIC )")
      Example data/taxes.examples:32 (32): [if, form, 1040, ,, line, 39b, checkbox, `, mustitemizeind, ', is, checked, ,, then, line, 3, checkbox, married] => (string "has_value( mustItemizeInd ) &  ~value( individualReturnFilingStatusCd,3 )")
      Example data/taxes.examples:33 (33): [if, form, 1040, ,, line, 20b, `, taxablesocsecamt, ', has, a, non, zero, value, ,, then, line, 20a, `, socsecbnftamt, ', must, have, a, non, zero, value, .] => (string "non_zero( taxableSocSecAmt ) & ~non_zero( socSecBnftAmt )")
      Example data/taxes.examples:34 (34): [if, form, 1040, ,, line, 74, `, totalpaymentsamt, ', is, not, equal, to, line, 63, `, totaltaxamt, ', ,, then, one, of, the, following, must, have, a, non, zero, value:, line, 75, `, overpaidamt, ', or, line, 76a, `, refundamt, ', or, line, 77, `, appliedtoestaxamt, ', or, line, 78, `, owedamt, ', .] => (string "~same( totalPaymentsAmt,totalTaxAmt ) & non_zero( overPaidAmt ) | non_zero( refundAmt ) | non_zero( appliedToEsTaxAmt ) | non_zero( owedAmt )")
      Example data/taxes.examples:35 (35): [if, form, 1040, ,, line, 16a, `, pensionsannuitiesamt, ', or, line, 16b, `, totaltaxablepensionsamt, ', has, a, non, zero, value, ,, then, both, amounts, cannot, be, equal, .] => (string "non_zero( pensionsAnnuitiesAmt ) & non_zero( totalTaxablePensionsAmt ) & same( pensionsAnnuitiesAmt,totalTaxablePensionsAmt )")
      Example data/taxes.examples:36 (36): [if, form, 1040, ,, line, 74, `, totalpaymentsamt, ', is, greater, than, line, 63, `, totaltaxamt, ', and, [, line, 77, `, appliedtoestaxamt, ', plus(, +, ), line, 79, `, espenaltyamt, ', is, equal, to, line, 75, `, overpaidamt, ', ], ,, then, line, 76a, `, refundamt, ', must, be, equal, to, zero, if, an, amount, is, entered, .] => (string "greater_than( totalPaymentsAmt,totalTaxAmt ) & plus( appliedToEsTaxAmt,esPaneltyAmt,overpaidAmt ) &  has_value( refundAmt ) & non_zero( refundAmt )")
      Example data/taxes.examples:37 (37): [if, form, 1040, ,, line, 74, `, totalpaymentsamt, ', is, greater, than, line, 63, `, totaltaxamt, ', and, [, line, 77, `, appliedtoestaxamt, ', plus, (, +, ), line, 79, `, espenaltyamt, ', is, less, than, line, 75, `, overpaidamt, ', ], ,, then, line, 76a, `, refundamt, ', must, have, a, non, zero, value, .] => (string "greater_than( totalPaymentsAmt,totalTaxAmt ) & greater_than( overpaidAmt,plus( appliedToEsTaxAmt,esPaneltyAmt ) ) & ~non_zero( refundAmt )")
      Example data/taxes.examples:38 (38): [if, form, 1040, ,, line, 74, `, totalpaymentsamt, ', is, equal, to, line, 63, `, totaltaxamt, ', ,, then, the, following, lines, must, not, have, a, value, greater, than, zero:, line, 75, `, overpaidamt, ', and, line, 76a, `, refundamt, ', and, line, 77, `, appliedtoestaxamt, ', .] => (string "same( totalPaymentsAmt,totalTaxAmt ) & greater_than( appliedToEsTaxAmt,0 ) & greater_than( refundAmt,0 ) & greater_than( overpaidAmt,0 )")
      Example data/taxes.examples:39 (39): [if, form, 1040, ,, line, 6c, `, chldnotlivingwithyoucnt, ', has, a, non, zero, value, ,, there, must, be, at, least, one, dependent, listed, in, line, 6c, that, has, its, line, 6c(, 3, ), `, dependentrelationshipcd, ', from, among, the, following, values:, (, stepchild, or, half] => (string "non_zero( chldNotLivingWithYouCnt ) & ~( same( dependentRelationshipCd( I ),stepChild ) | same( dependentRelationshipCd( I ),halfBrother ) | same( dependentRelationshipCd( I ),halfSister ) | same( dependentRelationshipCd( I ),stepBrother ) | same( dependentRelationshipCd( I ),stepSister ) | same( dependentRelationshipCd( I ),fosterChild ) | same( dependentRelationshipCd( I ),grandChild ) | same( dependentRelationshipCd( I ),brother ) |same( dependentRelationshipCd( I ),sister ) | same( dependentRelationshipCd( I ),nephew ) | same( dependentRelationshipCd( I ),niece ) | same( dependentRelationshipCd( I ),son ) | same( dependentRelationshipCd( I ),daughter )")
      Example data/taxes.examples:40 (40): [if, form, 1040, ,, line, 13, checkbox, `, capitaldistributionind, ', is, checked, ,, then, line, 13, `, capitalgainlossamt, ', must, have, a, non, zero, value, .] => (string "has_value( capitalDistributionInd ) & ~non_zero( capitalGainLossAmt )")
      Example data/taxes.examples:41 (41): [if, form, 2210, is, present, ,, then, form, 1040, ,, line, 79, `, espenaltyamt, ', must, be, equal, to, form, 2210, ,, line, 17, `, penaltyamt, ', or, form, 2210, ,, line, 27, `, totalpenaltyamt, ', .] => (string "has_value( form2210 ) & ~( same( esPaneltyAmt,form2210PentaltyAmt,Y ) | same( esPaneltyAmt,form2210TotalPenaltyAmt ) )")
      Example data/taxes.examples:42 (42): [form, 1040, ,, line, 6d, `, totalexemptionscnt, ', must, be, equal, to, the, total, of, the, following, fields:, `, totalexemptprimaryandspousecnt, ', ,, `, chldwholivedwithyoucnt, ', ,, `, chldnotlivingwithyoucnt, ', ,, and, `, otherdependentslistedcnt, ', .] => (string "~plus( totalExemptPrimaryAndSpouseCnt,chldWhoLivedWithYouCnt,chldNotLivingWithYouCnt,otherDependentsListedCnt,totalExemptionsCnt )")
      Example data/taxes.examples:43 (43): [if, form, 1040, ,, line, 24, `, busexpnsreservistsandothersamt, ', has, a, non, zero, value, ,, then, form, 2106, or, form, 2106, ez, must, be, attached, to, line, 24, .] => (string "non_zero( busExpnsReservistsAndOthersAmt ) & ~has_value( form2106 ) & ~has_value( form2106EZ )")
      Example data/taxes.examples:44 (44): [if, form, 1040, ,, line, 54c, checkbox, `, specificothercreditsind, ', is, checked, and, `, creditformsstatementschrcd, ', has, the, value, sch] => (string "has_value( specificOtherCreditsInd ) &  value( creditFormsStatementSchRCd,sch_R ) & ~has_value( primary65OrOlderInd ) & ~has_value( spouse65OrOlderInd ) &\n                             ~has_value( und65RtdPermnntTotDsbltyInd ) & ~has_value( bothUnder65OneRtdDsbltyInd ) & ~has_value( bothUnder65BothRtdDsbltyInd ) & ~has_value( under65DidNotLiveTogetherInd )")
      Example data/taxes.examples:45 (45): [if, form, 1040, ,, line, 51, `, rtrsavingscontributionscramt, ', has, a, non, zero, value, ,, then, form, 8880, must, be, attached, .] => (string "non_zero( rtrSavingsContributionsCrAmt ) & ~has_value( form8880 )")
      Example data/taxes.examples:46 (46): [if, form, 1040, ,, line, 36, `, otheradjustmentstotalamt, ', has, a, non, zero, value, or, other] => (string "( non_zero( otherAdjustmentTotalAmt ) | has_value( otherAdjustmentsStatement ) )  & same( totalAdjustmentAmt,0 )")
      Example data/taxes.examples:47 (47): [if, form, 1040, ,, line, 2, checkbox, married] => (string "value( individualReturnFilingStatusCd,2 ) & ~has_value( spousePINEnteredByCd )")
      Example data/taxes.examples:48 (48): [if, form, 1040, line, 3, checkbox, married] => (string "value( individualReturnFilingStatusCd,3 ) & has_value( earnedIncomeCreditAmt ) & ~same( earnedIncomeCreditAmt,0 )")
      Example data/taxes.examples:49 (49): [if, form, 1040, ,, line, 36, `, totaladjustmentsamt, ', has, a, non, zero, value, ,, then, at, least, one, of, the, following, must, have, a, non, zero, value:, line, 23, `, educatorexpensesamt, ', or, line, 24, `, busexpnsreservistsandothersamt, ', or, line, 25, `, healthsavingsaccountdedamt, ', or, line, 26, `, movingexpenseamt, ', or, line, 27, `, deductibleselfemploymenttaxamt, ', or, line, 28, `, selfempldsepsimpleqlfyplansamt, ', or, line, 29, `, selfempldhealthinsdedamt, ', or, line, 30, `, pnltyonerlywthdrwofsavingsamt, ', or, line, 31a, `, totalalimonypaidamt, ', or, line, 32, `, iradeductionamt, ', or, line, 33, `, studentloaninterestdedamt, ', or, line, 34, `, tuitionandfeesdedamt, ', or, line, 35, `, domesticproductionactdedamt, ', or, `, otheradjustmentsamt, ', in, `, otheradjustmentsstatement, ', attached, to, line, 36, .] => (string "non_zero( totalAdjustmentsAmt ) & same( educatorExpensesAmt,0 ) & same( busExpnsReservistsAndOthersAmt,0 ) &  same( healthSavingsAccountDedAmt,0 ) &\n                                                             same( movingExpenseAmt,0 ) & same( deductibleSelfEmploymentTaxAmt,0 ) & same( selfEmpldSepSimpleQlfyPlansAmt,0 ) &\n                                                             same( selfEmpldHealthInsDedAmt,0 ) & same( pnltyOnErlyWthdrwOfSavingsAmt,0 ) & same( totalAlimonyPaidAmt,0 ) & same( iRADeductionAmt,0 ) &\n                                                             same( studentLoanInterestDedAmt,0 ) & same( tuitionAndFeesDedAmt,0 ) & same( domesticProductionActDedAmt,0 ) & same( otherAdjustmentsAmt,0 )")
      Example data/taxes.examples:50 (50): [form, 1040, ,, line, 55, `, totalcreditsamt, ', must, be, equal, to, the, sum, of, the, following:, line, 48, `, foreigntaxcreditamt, ', and, line, 49, `, creditforchildanddepdcareamt, ', and, line, 50, `, educationcreditamt, ', and, line, 51, `, rtrsavingscontributionscramt, ', and, line, 52, `, childtaxcreditamt, ', and, line, 53, `, residentialenergycreditamt, ', and, line, 54, `, othercreditsamt, ', .] => (string "~plus( foreignTaxCreditAmt,creditForChildAndDepdCareAmt,educationCreditAmt,rtrSavingsContributionsCrAmt,childTaxCreditAmt,residentialEnergyCreditAmt,totalCreditAmt )")
      Example data/taxes.examples:51 (51): [at, least, one, of, the, following, must, have, a, non, zero, value, on, form, 1040:, line, 22, `, totalincomeamt, ', or, line, 37, `, adjustedgrossincomeamt, ', or, line, 44, `, taxamt, ', or, line, 55, `, totalcreditsamt, ', or, line, 63, `, totaltaxamt, ', or, line, 74, `, totalpaymentsamt, ', .] => (string "same( totalIncomeAmt,0 ) & same( adjustedGrossIncomeAmt,0 ) & same( taxAmt,0 ) & same( totalCreditsAmt,0 ) & same( totalTaxAmt,0 ) & same( totalpaymentsAmt,0 )")
      Example data/taxes.examples:52 (52): [form, 1040, ,, line, 74, `, totalpaymentsamt, ', must, be, equal, to, the, sum, of, the, following:, line, 64, `, withholdingtaxamt, ', and, line, 65, `, estimatedtaxpaymentsamt, ', and, line, 66a, `, earnedincomecreditamt, ', and, line, 67, `, additionalchildtaxcreditamt, ', and, line, 68, `, refundableameroppcreditamt, ', and, line, 69, `, reconciledpremiumtaxcreditamt, ', and, line, 70, `, requestforextensionamt, ', and, line, 71, `, excesssocsecandtier1rrtataxamt, ', and, line, 72, `, totalfueltaxcreditamt, ', and, line, 73, `, otherpaymentsamt, ', and, line, 74, `, form8689amt, ', .] => (string "~plus( withholdingTaxAmt,( estimatedTaxPaymentsAmt,earnedIncomeCreditAmt,additionalChildTaxCreditAmt,refundableAmerOppCreditAmt,reconciledPremiumTaxCreditAmt,requestForExtensionAmt,excessSocSecAndTier1RRTATaxAmt,totalFuelTaxCreditAmt,otherPaymentsAmt,withholdingTaxAmt )")
      Example data/taxes.examples:53 (53): [if, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', is, greater, than, 503, ,, then, schedule, eic, (, form, 1040a, or, 1040, ), must, be, present, in, the, return, .] => (string "greater_than( earnedIncomeCreditAmt,503 ) & ~has_value( scheduleEIC )")
      Example data/taxes.examples:54 (54): [if, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', has, a, non, zero, value, and, schedule, eic, (, form, 1040, ), is, not, present, in, the, return, ,, then, the, primary, taxpayer, and/or, the, spouse, taxpayer, in, the, return, header, must, be, at, least, 25, years, old, but, not, be, older, than, 64, .] => (string "non_zero( earnedIncomeCreditAmt ) & ~has_value( scheduleEIC ) & ~( ( age( primarySSN,X ) & greater_than( X,25 ) & greater_than( 65,X ) ) | ( age( spouseSSN,Y ) & greater_than( Y,25 ) & greater_than( 65,Y ) ) )")
      Example data/taxes.examples:55 (55): [if, schedule, a, (, form, 1040, ), is, not, present, in, the, return, and, form, 1040, ,, line, 39b, checkbox, `, mustitemizeind, ', is, checked, ,, then, form, 1040, ,, line, 40, `, totalitemizedorstandarddedamt, ', must, have, a, zero, value, if, an, amount, is, entered, .] => (string "~has_value( scheduleA ) & has_value( mustItemizeInd ) & non_zero( totalItemizedOrStandardDedAmt,X )")
      Example data/taxes.examples:56 (56): [form, 1040, ,, line, 64, `, withholdingtaxamt, ', must, be, less, than, the, sum, of, the, following:, [, line, 7, `, wagessalariesandtipsamt, ', and, line, 8a, `, taxableinterestamt, ', and, line, 9a, `, ordinarydividendsamt, ', and, (, line, 15a, `, iradistributionsamt, ', or, line, 15b, `, taxableiraamt, ', ), and, (, line, 16a, `, pensionsannuitiesamt, ', or, line, 16b, `, totaltaxablepensionsamt, ', ), and, line, 19, `, unemploymentcompamt, ', and, line, 20a, `, socsecbnftamt, ', and, (, all, `, otherincomeamt, ', in, [, otherincometypestatement, ], attached, to, line, 21, ), and, (, all, schedule, c, (, form, 1040, ), ,, line, 1, `, totalgrossreceiptsamt, ', ), and, (, all, schedule, c, ez(, form, 1040, ), ,, line, 1, `, totalgrossreceiptsamt, ', ), ], unless, one, of, the, following, is, true:, (, 1, ), line, 13, `, capitalgainlossamt, ', has, a, non, zero, value;, (, 2, ), line, 14, `, othergainlossamt, ', has, a, non, zero, value;, (, 3, ), line, 17, `, rentalrealestateincomelossamt, ', has, a, non, zero, value;, (, 4, ), line, 18, `, netfarmprofitlossamt, ', has, a, non, zero, value;, (, 5, ), combat, pay, has, been, excluded, from, wages, .] => (string "~non_zero( capitalGainLossAmt ) & ~non_zero( otherGainLossAmt ) & ~nonzero( rentalRealEstateIncomeLossAmt ) & ~nonzero( netFarmProfitLossAmt ) &\n                               ~greater_than( plus( wagesSalariesAndTipsAmt,taxableInterestAmt,ordinaryDividentsAmt,iRADistributionsAmt,pensionsAnnuitiesAmt,unemploymentCompAmt,socSecBenftAmt,otherIncomeAmt,totalGrossReceiptAmt ),withholdingTaxAmt )")
      Example data/taxes.examples:57 (57): [if, form, 1040, ,, line, 78, `, owedamt, ', has, a, non, zero, value, and, line, 79, `, espenaltyamt, ', has, a, zero, value, or, has, no, entry, ,, then, line, 63, `, totaltaxamt, ', must, be, greater, than, line, 74, `, totalpaymentsamt, ', .] => (string "non_zero( owedAmt ) & ( same( esPenaltyAmt,0 ) | ~has_value( esPenaltyAmt ) ) & ~greater_than( totalTaxAmt,totalPaymentsAmt )")
      Example data/taxes.examples:58 (58): [for, each, dependent, that, has, a, value, on, form, 1040, ,, line, 6c(, 1, ), ,, if, line, 6c(, 4, ), checkbox, `, eligibleforchildtaxcreditind, ', is, checked, ,, then, the, corresponding, line, 6c(, 3, ), `, dependentrelationshipcd, ', must, have, one, of, the, following, values:, stepchild, or, half] => (string "has_value( eligibleForChildTaxCreditInd( I ) ) & ~( same( dependentRelationshipCd( I ),stepChild ) | same( dependentRelationshipCd( I ),halfBrother ) | same( dependentRelationshipCd( I ),halfSister ) | same( dependentRelationshipCd( I ),stepBrother ) | same( dependentRelationshipCd( I ),stepSister ) | same( dependentRelationshipCd( I ),fosterChild ) | same( dependentRelationshipCd( I ),grandChild ) | same( dependentRelationshipCd( I ),brother ) |same( dependentRelationshipCd( I ),sister ) | same( dependentRelationshipCd( I ),nephew ) | same( dependentRelationshipCd( I ),niece ) | same( dependentRelationshipCd( I ),son ) | same( dependentRelationshipCd( I ),daughter )")
      Example data/taxes.examples:59 (59): [form, 1040, ,, line, 6c, ,, for, each, dependent, provided, ,, if, line, 6c, (, 4, ), checkbox, `, eligibleforchildtaxcreditind, ', is, checked, ,, then, that, dependent, ', s, age, must, be, under, 17, .] => (string "has_value( eligibleForChildTaxCreditInd( I ) ) & greater_than( age( depSSN( I ),17 )")
      Example data/taxes.examples:60 (60): [if, form, 1040, ,, line, 52, `, childtaxcreditamt, ', or, line, 67, `, additionalchildtaxcreditamt, ', has, a, non, zero, value, ,, then, the, sum, of, line, 52, and, line, 67, cannot, exceed, an, amount, equal, to, $1000, times, the, number, of, qualifying, children, .] => (string "non_zero( childTaxCreditAmt )  & \n                               greater_than( plus( childTaxCreditAmt,additionalChildTaxCreditAmt ),times( plus( chldWhoLivedWithYouCnt,chldNotLivingWithYouCnt ),1000 ) )")
      Example data/taxes.examples:61 (61): [if, form, 1040, ,, line, 59, `, retirementtaxplanliteralcd, ', has, the, value, no, ,, then, `, taxonirasamt, ', must, have, a, value, greater, than, zero, .] => (string "value( retirementTaxPlanLiteralCd,no ) & ~greater_than( taxOnIRAAmt,0 )")
      Example data/taxes.examples:62 (62): [form, 1040, ,, line, 21, `, totalotherincomeamt, ', must, be, equal, to, the, sum, of, all, `, otherincomeamt, ', in, [, otherincometypestatement, ], attached, to, line, 21, .] => (string "value( totalOtherIncomeAmt,X ) & sumofall( Y,otherIncomeAmt( I ),Z ) & ~same( X,Z )")
      Example data/taxes.examples:63 (63): [form, 1040, ,, line, 50, `, educationcreditamt, ', must, be, equal, to, form, 8863, ,, line, 19, `, nonrefundableeducationcramt, ', .] => (string "~same( educationCreditAmt,nonRefundableEducationCrAmt )")
      Example data/taxes.examples:64 (64): [if, form, 1040, ,, line, 33, `, studentloaninterestdedamt, ', has, a, non, zero, value, ,, then, form, 1040, ,, line, 3, checkbox, married] => (string "non_zero( studentLoanInterestDedAmt ) & value( indvidualReturnFilingStatusCd,3 )")
      Example data/taxes.examples:65 (65): [form, 1040, ,, line, 60b, `, firsttimehmbyrrepaymentamt, ', must, not, be, less, than, zero, ,, if, an, amount, is, entered, .] => (string "~greater_than( firstTimeHmByrRepaymentAmt,0 )")
      Example data/taxes.examples:66 (66): [form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', must, have, a, zero, value, if, an, amount, is, entered, ., e, file, database, indicates, the, taxpayer, is, not, allowed, to, claim, earned, income, credit, for, the, tax, year, .] => (string "non_zero( earnedIncomeCreditAmt )")
      Example data/taxes.examples:67 (67): [if, [, ', stateabbreviationcd, ', of, the, filer, ', s, address, in, the, return, header, is, equal, to, as, ,, gu, ,, mp, ,, pr, or, vi, ], or, [, the, filer, ', s, address, in, the, return, header, is, a, foreign, address, ], ,, then, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', must, be, equal, to, zero, or, not, be, present, .] => (string "value( stateAbbrevationCd,X ) & ( same( X,as ) | same( X,gu ) | same( X,mp ) |  same( X,pr ) |  same( X,vi ) | same( X,foreign ) )  & non_zero( earnedIncomeCreditAmt )")
      Example data/taxes.examples:68 (68): [if, form, 1040, ,, line, 2, checkbox, married] => (string "value( individualReturnFilingStatusCd,2 ) & (  has_value( primaryDeathDt ) | has_value( spouseDeathDt ) ) & ~has_value( survivingSpouseInd )")
      Example data/taxes.examples:69 (69): [if, form, 1040, ,, line, 2, checkbox, married] => (string "~value( individualReturnFilingStatusCd,2 ) & has_value( primaryDeathDt ) & ~has_value( personalRepresentativevInd )")
      Example data/taxes.examples:70 (70): [if, form, 1040, ,, line, 2, checkbox, married] => (string "value( individualReturnFilingStatusCd,2 ) & has_value( primaryDeathDt ) & has_value( spouseDeathDt ) & ~has_value( personalRepresentativeInd )")
      Example data/taxes.examples:71 (71): [if, form, 1040, ,, line, 2, checkbox, married] => (string "~value( individualReturnFilingStatusCd,2 ) & has_value( primaryDeathDt ) & ~value( nameLine1Txt,decd ) & ~value( nameLine1Text,leftAngleDecd )")
    }
  }
  Learner.learn() {
    Iteration 0/0 {
      Processing iter=0.train: 72 examples {
        Examples {
          iter=0.train: example 0/72: data/taxes.examples:33 {
            Example: If Form 1040, Line 20b 'TaxableSocSecAmt' has a non-zero value, then Line 20a 'SocSecBnftAmt' must have a non-zero value. {
              Tokens: [if, form, 1040, ,, line, 20b, `, taxablesocsecamt, ', has, a, non, zero, value, ,, then, line, 20a, `, socsecbnftamt, ', must, have, a, non, zero, value, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 20b, `, taxablesocsecamt, ', ha, a, non, zero, value, ,, then, line, 20a, `, socsecbnftamt, ', must, have, a, non, zero, value, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, CD, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK]
              targetValue: (string "non_zero( taxableSocSecAmt ) & ~non_zero( socSecBnftAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 1 candidates {
              True@0000: (derivation (formula (call + (call + (string "non_zero(") (string taxablesocsecamt) (string ")")) (string " & ~") (call + (string "non_zero(") (string socsecbnftamt) (string ")")))) (value (string "non_zero(taxablesocsecamt) & ~non_zero(socsecbnftamt)")) (type fb:type.any)) [score=0, prob=1, comp=1]
              Pred@0000: (derivation (formula (call + (call + (string "non_zero(") (string taxablesocsecamt) (string ")")) (string " & ~") (call + (string "non_zero(") (string socsecbnftamt) (string ")")))) (value (string "non_zero(taxablesocsecamt) & ~non_zero(socsecbnftamt)")) (type fb:type.any)) [score=0, prob=1, comp=1]
            }
            Current: correct=1 oracle=1 partCorrect=1 partOracle=1 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=1 numCandidates=1 parsedNumCandidates=1 numTokens=28 parseTime=133 maxCellSize=1 fallOffBeam=0 totalDerivs=1054 numOfFeaturizedDerivs=1054
            Cumulative(iter=0.train): correct=1 oracle=1 partCorrect=1 partOracle=1 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=1 numCandidates=1 parsedNumCandidates=1 numTokens=28 parseTime=133 maxCellSize=1 fallOffBeam=0 totalDerivs=1054 numOfFeaturizedDerivs=1054
          }
          iter=0.train: example 1/72: data/taxes.examples:62 {
            Example: Form 1040, Line 21 'TotalOtherIncomeAmt' must be equal to the sum of all 'OtherIncomeAmt' in [OtherIncomeTypeStatement] attached to Line 21. {
              Tokens: [form, 1040, ,, line, 21, `, totalotherincomeamt, ', must, be, equal, to, the, sum, of, all, `, otherincomeamt, ', in, [, otherincometypestatement, ], attached, to, line, 21, .]
              Lemmatized tokens: [form, 1040, ,, line, 21, `, totalotherincomeamt, ', must, be, equal, to, the, sum, of, all, `, otherincomeamt, ', in, [, otherincometypestatement, ], attached, to, line, 21, .]
              POS tags: [NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, '', UNK, UNK, NNP, UNK, UNK, UNK, NNP, CD, UNK]
              NER tags: [UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK]
              NER values: [UNK, 1040, UNK, UNK, 21, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 21, UNK]
              targetValue: (string "value( totalOtherIncomeAmt,X ) & sumofall( Y,otherIncomeAmt( I ),Z ) & ~same( X,Z )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=28 parseTime=56 maxCellSize=1 fallOffBeam=0 totalDerivs=1026 numOfFeaturizedDerivs=1026
            Cumulative(iter=0.train): correct=0.500 oracle=0.500 partCorrect=0.500 partOracle=0.500 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.500 numCandidates=0.500 parsedNumCandidates=1 numTokens=28 parseTime=94.500 maxCellSize=1 fallOffBeam=0 totalDerivs=1040 numOfFeaturizedDerivs=1040
          }
          iter=0.train: example 2/72: data/taxes.examples:59 {
            Example: Form 1040, Line 6c, for each dependent provided, if Line 6c ( 4 ) checkbox 'EligibleForChildTaxCreditInd' is checked, then that dependent's age must be under 17. {
              Tokens: [form, 1040, ,, line, 6c, ,, for, each, dependent, provided, ,, if, line, 6c, (, 4, ), checkbox, `, eligibleforchildtaxcreditind, ', is, checked, ,, then, that, dependent, ', s, age, must, be, under, 17, .]
              Lemmatized tokens: [form, 1040, ,, line, 6c, ,, for, each, dependent, provided, ,, if, line, 6c, (, 4, ), checkbox, `, eligibleforchildtaxcreditind, ', i, checked, ,, then, that, dependent, ', s, age, must, be, under, 17, .]
              POS tags: [NNP, CD, UNK, NNP, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, UNK, UNK, CD, UNK, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, '', UNK, UNK, UNK, UNK, UNK, CD, UNK]
              NER tags: [UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK]
              NER values: [UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 4, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 17, UNK]
              targetValue: (string "has_value( eligibleForChildTaxCreditInd( I ) ) & greater_than( age( depSSN( I ),17 )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=35 parseTime=14 maxCellSize=1 fallOffBeam=0 totalDerivs=1378 numOfFeaturizedDerivs=1378
            Cumulative(iter=0.train): correct=0.333 oracle=0.333 partCorrect=0.333 partOracle=0.333 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.333 numCandidates=0.333 parsedNumCandidates=1 numTokens=30.333 parseTime=67.667 maxCellSize=1 fallOffBeam=0 totalDerivs=1152.667 numOfFeaturizedDerivs=1152.667
          }
          iter=0.train: example 3/72: data/taxes.examples:15 {
            Example: If Form 1040, Line 8a 'TaxableInterestAmt' is greater than 1500, then it must be equal to Schedule B ( Form 1040 ), Line 4 'CalculatedTotalTaxableIntAmt' unless Form 8958 is present in the return. {
              Tokens: [if, form, 1040, ,, line, 8a, `, taxableinterestamt, ', is, greater, than, 1500, ,, then, it, must, be, equal, to, schedule, b, (, form, 1040, ), ,, line, 4, `, calculatedtotaltaxableintamt, ', unless, form, 8958, is, present, in, the, return, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 8a, `, taxableinterestamt, ', i, greater, than, 1500, ,, then, it, must, be, equal, to, schedule, b, (, form, 1040, ), ,, line, 4, `, calculatedtotaltaxableintamt, ', unles, form, 8958, i, present, in, the, return, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, NNP, UNK, NNP, CD, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1500, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, 4, UNK, UNK, UNK, UNK, UNK, 8958, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "greater_than( taxableInterestAmt,1500 ) &  ~has_value( form8958 ) & ~same( taxableInterestAmt,calculatedTotalTaxableIntAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=41 parseTime=33 maxCellSize=1 fallOffBeam=0 totalDerivs=1978 numOfFeaturizedDerivs=1978
            Cumulative(iter=0.train): correct=0.250 oracle=0.250 partCorrect=0.250 partOracle=0.250 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.250 numCandidates=0.250 parsedNumCandidates=1 numTokens=33 parseTime=59 maxCellSize=1 fallOffBeam=0 totalDerivs=1359 numOfFeaturizedDerivs=1359
          }
          iter=0.train: example 4/72: data/taxes.examples:34 {
            Example: If Form 1040, Line 74 'TotalPaymentsAmt' is not equal to Line 63 'TotalTaxAmt', then one of the following must have a non-zero value: Line 75 'OverpaidAmt' or Line 76a 'RefundAmt' or Line 77 'AppliedToEsTaxAmt' or Line 78 'OwedAmt'. {
              Tokens: [if, form, 1040, ,, line, 74, `, totalpaymentsamt, ', is, not, equal, to, line, 63, `, totaltaxamt, ', ,, then, one, of, the, following, must, have, a, non, zero, value:, line, 75, `, overpaidamt, ', or, line, 76a, `, refundamt, ', or, line, 77, `, appliedtoestaxamt, ', or, line, 78, `, owedamt, ', .]
              Lemmatized tokens: [if, form, 1040, ,, line, 74, `, totalpaymentsamt, ', i, not, equal, to, line, 63, `, totaltaxamt, ', ,, then, one, of, the, following, must, have, a, non, zero, value:, line, 75, `, overpaidamt, ', or, line, 76a, `, refundamt, ', or, line, 77, `, appliedtoestaxamt, ', or, line, 78, `, owedamt, ', .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, CD, UNK, NNP, CD, UNK, NNP, '', UNK, NNP, UNK, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 74, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 63, UNK, UNK, UNK, UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, 75, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 77, UNK, UNK, UNK, UNK, UNK, 78, UNK, UNK, UNK, UNK]
              targetValue: (string "~same( totalPaymentsAmt,totalTaxAmt ) & non_zero( overPaidAmt ) | non_zero( refundAmt ) | non_zero( appliedToEsTaxAmt ) | non_zero( owedAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=54 parseTime=64 maxCellSize=1 fallOffBeam=0 totalDerivs=3414 numOfFeaturizedDerivs=3414
            Cumulative(iter=0.train): correct=0.200 oracle=0.200 partCorrect=0.200 partOracle=0.200 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.200 numCandidates=0.200 parsedNumCandidates=1 numTokens=37.200 parseTime=60 maxCellSize=1 fallOffBeam=0 totalDerivs=1770 numOfFeaturizedDerivs=1770
          }
          iter=0.train: example 5/72: data/taxes.examples:37 {
            Example: If Form 1040, Line 74 'TotalPaymentsAmt' is greater than Line 63 'TotalTaxAmt' and [Line 77 'AppliedToEsTaxAmt' plus ( + ) Line 79 'EsPenaltyAmt' is less than Line 75 'OverpaidAmt'], then Line 76a 'RefundAmt' must have a non-zero value. {
              Tokens: [if, form, 1040, ,, line, 74, `, totalpaymentsamt, ', is, greater, than, line, 63, `, totaltaxamt, ', and, [, line, 77, `, appliedtoestaxamt, ', plus, (, +, ), line, 79, `, espenaltyamt, ', is, less, than, line, 75, `, overpaidamt, ', ], ,, then, line, 76a, `, refundamt, ', must, have, a, non, zero, value, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 74, `, totalpaymentsamt, ', i, greater, than, line, 63, `, totaltaxamt, ', and, [, line, 77, `, appliedtoestaxamt, ', plu, (, +, ), line, 79, `, espenaltyamt, ', i, les, than, line, 75, `, overpaidamt, ', ], ,, then, line, 76a, `, refundamt, ', must, have, a, non, zero, value, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, CD, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 74, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 63, UNK, UNK, UNK, UNK, UNK, UNK, 77, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 79, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 75, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK]
              targetValue: (string "greater_than( totalPaymentsAmt,totalTaxAmt ) & greater_than( overpaidAmt,plus( appliedToEsTaxAmt,esPaneltyAmt ) ) & ~non_zero( refundAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=56 parseTime=87 maxCellSize=1 fallOffBeam=0 totalDerivs=3712 numOfFeaturizedDerivs=3712
            Cumulative(iter=0.train): correct=0.167 oracle=0.167 partCorrect=0.167 partOracle=0.167 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.167 numCandidates=0.167 parsedNumCandidates=1 numTokens=40.333 parseTime=64.500 maxCellSize=1 fallOffBeam=0 totalDerivs=2093.667 numOfFeaturizedDerivs=2093.667
          }
          iter=0.train: example 6/72: data/taxes.examples:56 {
            Example: Form 1040, Line 64 'WithholdingTaxAmt' must be less than the sum of the following: [Line 7 'WagesSalariesAndTipsAmt' and Line 8a 'TaxableInterestAmt' and Line 9a 'OrdinaryDividendsAmt' and ( Line 15a 'IRADistributionsAmt' or Line 15b 'TaxableIRAAmt' ) and ( Line 16a 'PensionsAnnuitiesAmt' or Line 16b 'TotalTaxablePensionsAmt'  ) and Line 19 'UnemploymentCompAmt' and Line 20a 'SocSecBnftAmt' and (  all 'OtherIncomeAmt' in [OtherIncomeTypeStatement] attached to Line 21  ) and (  all Schedule C ( Form 1040 ), Line 1 'TotalGrossReceiptsAmt'  ) and (  all Schedule C-EZ( Form 1040 ), Line 1 'TotalGrossReceiptsAmt'  ) ] unless one of the following is true: ( 1 ) Line 13 'CapitalGainLossAmt' has a non-zero value; ( 2 ) Line 14 'OtherGainLossAmt' has a non-zero value; ( 3 ) Line 17 'RentalRealEstateIncomeLossAmt' has a non-zero value; ( 4 ) Line 18 'NetFarmProfitLossAmt' has a non-zero value; ( 5 ) Combat Pay has been excluded from wages. {
              Tokens: [form, 1040, ,, line, 64, `, withholdingtaxamt, ', must, be, less, than, the, sum, of, the, following:, [, line, 7, `, wagessalariesandtipsamt, ', and, line, 8a, `, taxableinterestamt, ', and, line, 9a, `, ordinarydividendsamt, ', and, (, line, 15a, `, iradistributionsamt, ', or, line, 15b, `, taxableiraamt, ', ), and, (, line, 16a, `, pensionsannuitiesamt, ', or, line, 16b, `, totaltaxablepensionsamt, ', ), and, line, 19, `, unemploymentcompamt, ', and, line, 20a, `, socsecbnftamt, ', and, (, all, `, otherincomeamt, ', in, [, otherincometypestatement, ], attached, to, line, 21, ), and, (, all, schedule, c, (, form, 1040, ), ,, line, 1, `, totalgrossreceiptsamt, ', ), and, (, all, schedule, c, ez(, form, 1040, ), ,, line, 1, `, totalgrossreceiptsamt, ', ), ], unless, one, of, the, following, is, true:, (, 1, ), line, 13, `, capitalgainlossamt, ', has, a, non, zero, value;, (, 2, ), line, 14, `, othergainlossamt, ', has, a, non, zero, value;, (, 3, ), line, 17, `, rentalrealestateincomelossamt, ', has, a, non, zero, value;, (, 4, ), line, 18, `, netfarmprofitlossamt, ', has, a, non, zero, value;, (, 5, ), combat, pay, has, been, excluded, from, wages, .]
              Lemmatized tokens: [form, 1040, ,, line, 64, `, withholdingtaxamt, ', must, be, les, than, the, sum, of, the, following:, [, line, 7, `, wagessalariesandtipsamt, ', and, line, 8a, `, taxableinterestamt, ', and, line, 9a, `, ordinarydividendsamt, ', and, (, line, 15a, `, iradistributionsamt, ', or, line, 15b, `, taxableiraamt, ', ), and, (, line, 16a, `, pensionsannuitiesamt, ', or, line, 16b, `, totaltaxablepensionsamt, ', ), and, line, 19, `, unemploymentcompamt, ', and, line, 20a, `, socsecbnftamt, ', and, (, all, `, otherincomeamt, ', in, [, otherincometypestatement, ], attached, to, line, 21, ), and, (, all, schedule, c, (, form, 1040, ), ,, line, 1, `, totalgrossreceiptsamt, ', ), and, (, all, schedule, c, ez(, form, 1040, ), ,, line, 1, `, totalgrossreceiptsamt, ', ), ], unles, one, of, the, following, i, true:, (, 1, ), line, 13, `, capitalgainlossamt, ', ha, a, non, zero, value;, (, 2, ), line, 14, `, othergainlossamt, ', ha, a, non, zero, value;, (, 3, ), line, 17, `, rentalrealestateincomelossamt, ', ha, a, non, zero, value;, (, 4, ), line, 18, `, netfarmprofitlossamt, ', ha, a, non, zero, value;, (, 5, ), combat, pay, ha, been, excluded, from, wage, .]
              POS tags: [NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, NNP, UNK, UNK, NNP, '', UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, NNP, UNK, UNK, NNP, '', UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, NNP, UNK, UNK, NNP, '', UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, NNP, CD, UNK, NNP, '', UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, '', UNK, UNK, NNP, UNK, UNK, UNK, NNP, CD, UNK, UNK, UNK, UNK, NNP, NNP, UNK, NNP, CD, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, NNP, NNP, NNP, CD, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, CD, UNK, NNP, NNP, UNK, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, 1040, UNK, UNK, 64, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 7, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 19, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 21, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, UNK, 1, UNK, UNK, 13, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, 2, UNK, UNK, 14, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, 3, UNK, UNK, 17, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, 4, UNK, UNK, 18, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, 5, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "~non_zero( capitalGainLossAmt ) & ~non_zero( otherGainLossAmt ) & ~nonzero( rentalRealEstateIncomeLossAmt ) & ~nonzero( netFarmProfitLossAmt ) &\n                               ~greater_than( plus( wagesSalariesAndTipsAmt,taxableInterestAmt,ordinaryDividentsAmt,iRADistributionsAmt,pensionsAnnuitiesAmt,unemploymentCompAmt,socSecBenftAmt,otherIncomeAmt,totalGrossReceiptAmt ),withholdingTaxAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            } [1.4s, cum. 1.4s]
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=193 parseTime=1454 maxCellSize=1 fallOffBeam=0 totalDerivs=38679 numOfFeaturizedDerivs=38679
            Cumulative(iter=0.train): correct=0.143 oracle=0.143 partCorrect=0.143 partOracle=0.143 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.143 numCandidates=0.143 parsedNumCandidates=1 numTokens=62.143 parseTime=263 maxCellSize=1 fallOffBeam=0 totalDerivs=7320.143 numOfFeaturizedDerivs=7320.143
          } [1.4s, cum. 1.8s]
          iter=0.train: example 7/72: data/taxes.examples:68 {
            Example: If Form 1040, Line 2 checkbox Married {
              Tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              Lemmatized tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 2, UNK, UNK]
              targetValue: (string "value( individualReturnFilingStatusCd,2 ) & (  has_value( primaryDeathDt ) | has_value( spouseDeathDt ) ) & ~has_value( survivingSpouseInd )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=8 parseTime=1 maxCellSize=1 fallOffBeam=0 totalDerivs=99 numOfFeaturizedDerivs=99
            Cumulative(iter=0.train): correct=0.125 oracle=0.125 partCorrect=0.125 partOracle=0.125 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.125 numCandidates=0.125 parsedNumCandidates=1 numTokens=55.375 parseTime=230.250 maxCellSize=1 fallOffBeam=0 totalDerivs=6417.500 numOfFeaturizedDerivs=6417.500
          }
          iter=0.train: example 8/72: data/taxes.examples:69 {
            Example: If Form 1040, Line 2 checkbox Married {
              Tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              Lemmatized tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 2, UNK, UNK]
              targetValue: (string "~value( individualReturnFilingStatusCd,2 ) & has_value( primaryDeathDt ) & ~has_value( personalRepresentativevInd )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=8 parseTime=1 maxCellSize=1 fallOffBeam=0 totalDerivs=99 numOfFeaturizedDerivs=99
            Cumulative(iter=0.train): correct=0.111 oracle=0.111 partCorrect=0.111 partOracle=0.111 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.111 numCandidates=0.111 parsedNumCandidates=1 numTokens=50.111 parseTime=204.778 maxCellSize=1 fallOffBeam=0 totalDerivs=5715.444 numOfFeaturizedDerivs=5715.444
          }
          iter=0.train: example 9/72: data/taxes.examples:64 {
            Example: If Form 1040, Line 33 'StudentLoanInterestDedAmt' has a non-zero value, then Form 1040, Line 3 checkbox Married {
              Tokens: [if, form, 1040, ,, line, 33, `, studentloaninterestdedamt, ', has, a, non, zero, value, ,, then, form, 1040, ,, line, 3, checkbox, married]
              Lemmatized tokens: [if, form, 1040, ,, line, 33, `, studentloaninterestdedamt, ', ha, a, non, zero, value, ,, then, form, 1040, ,, line, 3, checkbox, married]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, NNP, CD, UNK, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 33, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, 1040, UNK, UNK, 3, UNK, UNK]
              targetValue: (string "non_zero( studentLoanInterestDedAmt ) & value( indvidualReturnFilingStatusCd,3 )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=23 parseTime=5 maxCellSize=1 fallOffBeam=0 totalDerivs=710 numOfFeaturizedDerivs=710
            Cumulative(iter=0.train): correct=0.100 oracle=0.100 partCorrect=0.100 partOracle=0.100 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.100 numCandidates=0.100 parsedNumCandidates=1 numTokens=47.400 parseTime=184.800 maxCellSize=1 fallOffBeam=0 totalDerivs=5214.900 numOfFeaturizedDerivs=5214.900
          }
          iter=0.train: example 10/72: data/taxes.examples:19 {
            Example: If Form 1040, Line 73 'OverpaidAmt' is greater than Line 77 'EsPenaltyAmt', then the sum of Line 74a 'RefundAmt', Line 75 'AppliedToEsTaxAmt', and Line 77 'EsPenaltyAmt' must be equal to Line 73 'OverpaidAmt'. {
              Tokens: [if, form, 1040, ,, line, 73, `, overpaidamt, ', is, greater, than, line, 77, `, espenaltyamt, ', ,, then, the, sum, of, line, 74a, `, refundamt, ', ,, line, 75, `, appliedtoestaxamt, ', ,, and, line, 77, `, espenaltyamt, ', must, be, equal, to, line, 73, `, overpaidamt, ', .]
              Lemmatized tokens: [if, form, 1040, ,, line, 73, `, overpaidamt, ', i, greater, than, line, 77, `, espenaltyamt, ', ,, then, the, sum, of, line, 74a, `, refundamt, ', ,, line, 75, `, appliedtoestaxamt, ', ,, and, line, 77, `, espenaltyamt, ', must, be, equal, to, line, 73, `, overpaidamt, ', .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, NNP, UNK, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 73, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 77, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 75, UNK, UNK, UNK, UNK, UNK, UNK, 77, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 73, UNK, UNK, UNK, UNK]
              targetValue: (string "greater_than( overpaidAmt,esPenaltyAmt ) & ~plus( refundAmt,appliedToEsTaxAmt,esPaneltyAmt,overpaidAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=50 parseTime=32 maxCellSize=1 fallOffBeam=0 totalDerivs=3034 numOfFeaturizedDerivs=3034
            Cumulative(iter=0.train): correct=0.091 oracle=0.091 partCorrect=0.091 partOracle=0.091 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.091 numCandidates=0.091 parsedNumCandidates=1 numTokens=47.636 parseTime=170.909 maxCellSize=1 fallOffBeam=0 totalDerivs=5016.636 numOfFeaturizedDerivs=5016.636
          }
          iter=0.train: example 11/72: data/taxes.examples:20 {
            Example: If Form 1040, Line 75 'OverpaidAmt' is greater than zero and less than Line 79 'EsPenaltyAmt', then ( Line 76a 'RefundAmt' and Line 77 'AppliedToEsTaxAmt' must be equal to zero if an amount is entered  ) and [ Line 78 'OwedAmt' must be equal to (  Line 79 'EsPenaltyAmt' minus( - ) Line 75 'OverpaidAmt' ) ]. {
              Tokens: [if, form, 1040, ,, line, 75, `, overpaidamt, ', is, greater, than, zero, and, less, than, line, 79, `, espenaltyamt, ', ,, then, (, line, 76a, `, refundamt, ', and, line, 77, `, appliedtoestaxamt, ', must, be, equal, to, zero, if, an, amount, is, entered, ), and, [, line, 78, `, owedamt, ', must, be, equal, to, (, line, 79, `, espenaltyamt, ', minus(, -, ), line, 75, `, overpaidamt, ', ), ], .]
              Lemmatized tokens: [if, form, 1040, ,, line, 75, `, overpaidamt, ', i, greater, than, zero, and, les, than, line, 79, `, espenaltyamt, ', ,, then, (, line, 76a, `, refundamt, ', and, line, 77, `, appliedtoestaxamt, ', must, be, equal, to, zero, if, an, amount, i, entered, ), and, [, line, 78, `, owedamt, ', must, be, equal, to, (, line, 79, `, espenaltyamt, ', minus(, -, ), line, 75, `, overpaidamt, ', ), ], .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, NNP, UNK, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 75, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, 79, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 77, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 78, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 79, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 75, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "greater_than( overpaidAmt,0 ) & greater_than( esPaneltyAmt,overpaidAmt ) & ~( same( refundAmt,0 ) & same( appliedToEsTaxAmt,0 ) & minus( esPenaltyAmt,overpaidAmt,owedAmt ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=74 parseTime=167 maxCellSize=1 fallOffBeam=0 totalDerivs=6168 numOfFeaturizedDerivs=6168
            Cumulative(iter=0.train): correct=0.083 oracle=0.083 partCorrect=0.083 partOracle=0.083 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.083 numCandidates=0.083 parsedNumCandidates=1 numTokens=49.833 parseTime=170.583 maxCellSize=1 fallOffBeam=0 totalDerivs=5112.583 numOfFeaturizedDerivs=5112.583
          }
          iter=0.train: example 12/72: data/taxes.examples:49 {
            Example: If Form 1040, Line 36 'TotalAdjustmentsAmt' has a non-zero value, then at least one of the following must have a non-zero value: Line 23 'EducatorExpensesAmt' or Line 24 'BusExpnsReservistsAndOthersAmt' or Line 25 'HealthSavingsAccountDedAmt' or Line 26 'MovingExpenseAmt' or Line 27 'DeductibleSelfEmploymentTaxAmt' or Line 28 'SelfEmpldSepSimpleQlfyPlansAmt' or Line 29 'SelfEmpldHealthInsDedAmt' or Line 30 'PnltyOnErlyWthdrwOfSavingsAmt' or Line 31a 'TotalAlimonyPaidAmt' or Line 32 'IRADeductionAmt' or Line 33 'StudentLoanInterestDedAmt' or Line 34 'TuitionAndFeesDedAmt' or Line 35 'DomesticProductionActDedAmt' or 'OtherAdjustmentsAmt' in 'OtherAdjustmentsStatement' attached to Line 36. {
              Tokens: [if, form, 1040, ,, line, 36, `, totaladjustmentsamt, ', has, a, non, zero, value, ,, then, at, least, one, of, the, following, must, have, a, non, zero, value:, line, 23, `, educatorexpensesamt, ', or, line, 24, `, busexpnsreservistsandothersamt, ', or, line, 25, `, healthsavingsaccountdedamt, ', or, line, 26, `, movingexpenseamt, ', or, line, 27, `, deductibleselfemploymenttaxamt, ', or, line, 28, `, selfempldsepsimpleqlfyplansamt, ', or, line, 29, `, selfempldhealthinsdedamt, ', or, line, 30, `, pnltyonerlywthdrwofsavingsamt, ', or, line, 31a, `, totalalimonypaidamt, ', or, line, 32, `, iradeductionamt, ', or, line, 33, `, studentloaninterestdedamt, ', or, line, 34, `, tuitionandfeesdedamt, ', or, line, 35, `, domesticproductionactdedamt, ', or, `, otheradjustmentsamt, ', in, `, otheradjustmentsstatement, ', attached, to, line, 36, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 36, `, totaladjustmentsamt, ', ha, a, non, zero, value, ,, then, at, least, one, of, the, following, must, have, a, non, zero, value:, line, 23, `, educatorexpensesamt, ', or, line, 24, `, busexpnsreservistsandothersamt, ', or, line, 25, `, healthsavingsaccountdedamt, ', or, line, 26, `, movingexpenseamt, ', or, line, 27, `, deductibleselfemploymenttaxamt, ', or, line, 28, `, selfempldsepsimpleqlfyplansamt, ', or, line, 29, `, selfempldhealthinsdedamt, ', or, line, 30, `, pnltyonerlywthdrwofsavingsamt, ', or, line, 31a, `, totalalimonypaidamt, ', or, line, 32, `, iradeductionamt, ', or, line, 33, `, studentloaninterestdedamt, ', or, line, 34, `, tuitionandfeesdedamt, ', or, line, 35, `, domesticproductionactdedamt, ', or, `, otheradjustmentsamt, ', in, `, otheradjustmentsstatement, ', attached, to, line, 36, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, CD, UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, UNK, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, UNK, NNP, '', UNK, UNK, NNP, '', UNK, UNK, NNP, CD, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 36, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, 23, UNK, UNK, UNK, UNK, UNK, 24, UNK, UNK, UNK, UNK, UNK, 25, UNK, UNK, UNK, UNK, UNK, 26, UNK, UNK, UNK, UNK, UNK, 27, UNK, UNK, UNK, UNK, UNK, 28, UNK, UNK, UNK, UNK, UNK, 29, UNK, UNK, UNK, UNK, UNK, 30, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 32, UNK, UNK, UNK, UNK, UNK, 33, UNK, UNK, UNK, UNK, UNK, 34, UNK, UNK, UNK, UNK, UNK, 35, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 36, UNK]
              targetValue: (string "non_zero( totalAdjustmentsAmt ) & same( educatorExpensesAmt,0 ) & same( busExpnsReservistsAndOthersAmt,0 ) &  same( healthSavingsAccountDedAmt,0 ) &\n                                                             same( movingExpenseAmt,0 ) & same( deductibleSelfEmploymentTaxAmt,0 ) & same( selfEmpldSepSimpleQlfyPlansAmt,0 ) &\n                                                             same( selfEmpldHealthInsDedAmt,0 ) & same( pnltyOnErlyWthdrwOfSavingsAmt,0 ) & same( totalAlimonyPaidAmt,0 ) & same( iRADeductionAmt,0 ) &\n                                                             same( studentLoanInterestDedAmt,0 ) & same( tuitionAndFeesDedAmt,0 ) & same( domesticProductionActDedAmt,0 ) & same( otherAdjustmentsAmt,0 )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=118 parseTime=273 maxCellSize=1 fallOffBeam=0 totalDerivs=14954 numOfFeaturizedDerivs=14954
            Cumulative(iter=0.train): correct=0.077 oracle=0.077 partCorrect=0.077 partOracle=0.077 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.077 numCandidates=0.077 parsedNumCandidates=1 numTokens=55.077 parseTime=178.462 maxCellSize=1 fallOffBeam=0 totalDerivs=5869.615 numOfFeaturizedDerivs=5869.615
          }
          iter=0.train: example 13/72: data/taxes.examples:42 {
            Example: Form 1040, Line 6d 'TotalExemptionsCnt' must be equal to the total of the following fields: 'TotalExemptPrimaryAndSpouseCnt', 'ChldWhoLivedWithYouCnt', 'ChldNotLivingWithYouCnt', and 'OtherDependentsListedCnt'. {
              Tokens: [form, 1040, ,, line, 6d, `, totalexemptionscnt, ', must, be, equal, to, the, total, of, the, following, fields:, `, totalexemptprimaryandspousecnt, ', ,, `, chldwholivedwithyoucnt, ', ,, `, chldnotlivingwithyoucnt, ', ,, and, `, otherdependentslistedcnt, ', .]
              Lemmatized tokens: [form, 1040, ,, line, 6d, `, totalexemptionscnt, ', must, be, equal, to, the, total, of, the, following, fields:, `, totalexemptprimaryandspousecnt, ', ,, `, chldwholivedwithyoucnt, ', ,, `, chldnotlivingwithyoucnt, ', ,, and, `, otherdependentslistedcnt, ', .]
              POS tags: [NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, '', UNK, UNK, NNP, '', UNK, UNK, NNP, '', UNK, UNK, UNK, NNP, '', UNK]
              NER tags: [UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, 1040, UNK, UNK, 6d, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "~plus( totalExemptPrimaryAndSpouseCnt,chldWhoLivedWithYouCnt,chldNotLivingWithYouCnt,otherDependentsListedCnt,totalExemptionsCnt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=35 parseTime=10 maxCellSize=1 fallOffBeam=0 totalDerivs=1541 numOfFeaturizedDerivs=1541
            Cumulative(iter=0.train): correct=0.071 oracle=0.071 partCorrect=0.071 partOracle=0.071 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.071 numCandidates=0.071 parsedNumCandidates=1 numTokens=53.643 parseTime=166.429 maxCellSize=1 fallOffBeam=0 totalDerivs=5560.429 numOfFeaturizedDerivs=5560.429
          }
          iter=0.train: example 14/72: data/taxes.examples:38 {
            Example: If Form 1040, Line 74 'TotalPaymentsAmt' is equal to Line 63 'TotalTaxAmt', then the following lines must not have a value greater than zero: Line 75 'OverpaidAmt' and Line 76a 'RefundAmt' and Line 77 'AppliedToEsTaxAmt'. {
              Tokens: [if, form, 1040, ,, line, 74, `, totalpaymentsamt, ', is, equal, to, line, 63, `, totaltaxamt, ', ,, then, the, following, lines, must, not, have, a, value, greater, than, zero:, line, 75, `, overpaidamt, ', and, line, 76a, `, refundamt, ', and, line, 77, `, appliedtoestaxamt, ', .]
              Lemmatized tokens: [if, form, 1040, ,, line, 74, `, totalpaymentsamt, ', i, equal, to, line, 63, `, totaltaxamt, ', ,, then, the, following, line, must, not, have, a, value, greater, than, zero:, line, 75, `, overpaidamt, ', and, line, 76a, `, refundamt, ', and, line, 77, `, appliedtoestaxamt, ', .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, NNP, UNK, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 74, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 63, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 75, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 77, UNK, UNK, UNK, UNK]
              targetValue: (string "same( totalPaymentsAmt,totalTaxAmt ) & greater_than( appliedToEsTaxAmt,0 ) & greater_than( refundAmt,0 ) & greater_than( overpaidAmt,0 )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=48 parseTime=21 maxCellSize=1 fallOffBeam=0 totalDerivs=2731 numOfFeaturizedDerivs=2731
            Cumulative(iter=0.train): correct=0.067 oracle=0.067 partCorrect=0.067 partOracle=0.067 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.067 numCandidates=0.067 parsedNumCandidates=1 numTokens=53.267 parseTime=156.733 maxCellSize=1 fallOffBeam=0 totalDerivs=5371.800 numOfFeaturizedDerivs=5371.800
          }
          iter=0.train: example 15/72: data/taxes.examples:43 {
            Example: If Form 1040, Line 24 'BusExpnsReservistsAndOthersAmt' has a non-zero value, then Form 2106 or Form 2106-EZ must be attached to Line 24. {
              Tokens: [if, form, 1040, ,, line, 24, `, busexpnsreservistsandothersamt, ', has, a, non, zero, value, ,, then, form, 2106, or, form, 2106, ez, must, be, attached, to, line, 24, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 24, `, busexpnsreservistsandothersamt, ', ha, a, non, zero, value, ,, then, form, 2106, or, form, 2106, ez, must, be, attached, to, line, 24, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, NNP, CD, UNK, NNP, CD, NNP, UNK, UNK, UNK, UNK, NNP, CD, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 24, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, 2106, UNK, UNK, 2106, UNK, UNK, UNK, UNK, UNK, UNK, 24, UNK]
              targetValue: (string "non_zero( busExpnsReservistsAndOthersAmt ) & ~has_value( form2106 ) & ~has_value( form2106EZ )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=29 parseTime=8 maxCellSize=1 fallOffBeam=0 totalDerivs=1036 numOfFeaturizedDerivs=1036
            Cumulative(iter=0.train): correct=0.063 oracle=0.063 partCorrect=0.063 partOracle=0.063 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.063 numCandidates=0.063 parsedNumCandidates=1 numTokens=51.750 parseTime=147.438 maxCellSize=1 fallOffBeam=0 totalDerivs=5100.813 numOfFeaturizedDerivs=5100.813
          }
          iter=0.train: example 16/72: data/taxes.examples:16 {
            Example: If Form 1040, Line 9a 'OrdinaryDividendsAmt' is greater than 1500, then it must be equal to Schedule B ( Form 1040 ), Line 6 'TotalOrdinaryDividendsAmt' unless Form 8958 is present in the return. {
              Tokens: [if, form, 1040, ,, line, 9a, `, ordinarydividendsamt, ', is, greater, than, 1500, ,, then, it, must, be, equal, to, schedule, b, (, form, 1040, ), ,, line, 6, `, totalordinarydividendsamt, ', unless, form, 8958, is, present, in, the, return, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 9a, `, ordinarydividendsamt, ', i, greater, than, 1500, ,, then, it, must, be, equal, to, schedule, b, (, form, 1040, ), ,, line, 6, `, totalordinarydividendsamt, ', unles, form, 8958, i, present, in, the, return, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, NNP, UNK, NNP, CD, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1500, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, 6, UNK, UNK, UNK, UNK, UNK, 8958, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "greater_than( ordinaryDividendsAmt,1500 ) &  ~has_value( form8958 ) & ~same( ordinaryDividendsAmt,totalOrdinaryDividendsAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=41 parseTime=13 maxCellSize=1 fallOffBeam=0 totalDerivs=1978 numOfFeaturizedDerivs=1978
            Cumulative(iter=0.train): correct=0.059 oracle=0.059 partCorrect=0.059 partOracle=0.059 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.059 numCandidates=0.059 parsedNumCandidates=1 numTokens=51.118 parseTime=139.529 maxCellSize=1 fallOffBeam=0 totalDerivs=4917.118 numOfFeaturizedDerivs=4917.118
          }
          iter=0.train: example 17/72: data/taxes.examples:2 {
            Example: If Form 1040, Line 4 checkbox Head {
              Tokens: [if, form, 1040, ,, line, 4, checkbox, head]
              Lemmatized tokens: [if, form, 1040, ,, line, 4, checkbox, head]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 4, UNK, UNK]
              targetValue: (string "value( individualReturnFilingStatusCd,4 ) & ~( ( has_value( qualifyingHOHNm )  & has_value( qualifyingHOHSSN ) )\n                                                                        | has_value( chldWhoLivedWithYouCnt )\n                                                                        | has_value( otherDependentsListedCnt ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=8 parseTime=0 maxCellSize=1 fallOffBeam=0 totalDerivs=99 numOfFeaturizedDerivs=99
            Cumulative(iter=0.train): correct=0.056 oracle=0.056 partCorrect=0.056 partOracle=0.056 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.056 numCandidates=0.056 parsedNumCandidates=1 numTokens=48.722 parseTime=131.778 maxCellSize=1 fallOffBeam=0 totalDerivs=4649.444 numOfFeaturizedDerivs=4649.444
          }
          iter=0.train: example 18/72: data/taxes.examples:24 {
            Example: If Form 1040, Line 13 checkbox 'CapitalDistributionInd' is checked, then Schedule D ( Form 1040 ) must NOT be present in the return. {
              Tokens: [if, form, 1040, ,, line, 13, checkbox, `, capitaldistributionind, ', is, checked, ,, then, schedule, d, (, form, 1040, ), must, not, be, present, in, the, return, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 13, checkbox, `, capitaldistributionind, ', i, checked, ,, then, schedule, d, (, form, 1040, ), must, not, be, present, in, the, return, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, NNP, UNK, NNP, CD, UNK, UNK, NNP, UNK, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 13, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "has_value( capitalDistributionInd ) & has_value( ScheduleD )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=28 parseTime=5 maxCellSize=1 fallOffBeam=0 totalDerivs=1009 numOfFeaturizedDerivs=1009
            Cumulative(iter=0.train): correct=0.053 oracle=0.053 partCorrect=0.053 partOracle=0.053 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.053 numCandidates=0.053 parsedNumCandidates=1 numTokens=47.632 parseTime=125.105 maxCellSize=1 fallOffBeam=0 totalDerivs=4457.842 numOfFeaturizedDerivs=4457.842
          }
          iter=0.train: example 19/72: data/taxes.examples:21 {
            Example: If Form 1040, Line 31a 'TotalAlimonyPaidAmt' has a non-zero value, then there must be at least one 'RecipientSSN' provided on Line 31b. {
              Tokens: [if, form, 1040, ,, line, 31a, `, totalalimonypaidamt, ', has, a, non, zero, value, ,, then, there, must, be, at, least, one, `, recipientssn, ', provided, on, line, 31b, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 31a, `, totalalimonypaidamt, ', ha, a, non, zero, value, ,, then, there, must, be, at, least, one, `, recipientssn, ', provided, on, line, 31b, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, CD, UNK, NNP, '', UNK, UNK, NNP, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "has_value( totalAlimonyPaidAmt ) &  ~has_value( recipientSSN( I ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=30 parseTime=7 maxCellSize=1 fallOffBeam=0 totalDerivs=1113 numOfFeaturizedDerivs=1113
            Cumulative(iter=0.train): correct=0.050 oracle=0.050 partCorrect=0.050 partOracle=0.050 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.050 numCandidates=0.050 parsedNumCandidates=1 numTokens=46.750 parseTime=119.200 maxCellSize=1 fallOffBeam=0 totalDerivs=4290.600 numOfFeaturizedDerivs=4290.600
          }
          iter=0.train: example 20/72: data/taxes.examples:18 {
            Example: Form 1040, Line 49 'CreditForChildAndDepdCareAmt' must be equal to Form 2441, Line 11 'CreditForChildAndDepdCareAmt'. {
              Tokens: [form, 1040, ,, line, 49, `, creditforchildanddepdcareamt, ', must, be, equal, to, form, 2441, ,, line, 11, `, creditforchildanddepdcareamt, ', .]
              Lemmatized tokens: [form, 1040, ,, line, 49, `, creditforchildanddepdcareamt, ', must, be, equal, to, form, 2441, ,, line, 11, `, creditforchildanddepdcareamt, ', .]
              POS tags: [NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK]
              NER tags: [UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK]
              NER values: [UNK, 1040, UNK, UNK, 49, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 2441, UNK, UNK, 11, UNK, UNK, UNK, UNK]
              targetValue: (string "~same( creditForChildAndDepdCareAmt,form2441Line11CreditForChildAndDepdCareAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 1 candidates {
              Pred@0000: (derivation (formula (call + (string ~) (call + (string "same(") (string creditforchildanddepdcareamt) (string ,) (string creditforchildanddepdcareamt) (string ")")))) (value (string "~same(creditforchildanddepdcareamt,creditforchildanddepdcareamt)")) (type fb:type.any)) [score=0, prob=1, comp=0]
            }
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=1 parsedNumCandidates=1 numTokens=21 parseTime=5 maxCellSize=1 fallOffBeam=0 totalDerivs=717 numOfFeaturizedDerivs=717
            Cumulative(iter=0.train): correct=0.048 oracle=0.048 partCorrect=0.048 partOracle=0.048 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.095 numCandidates=0.095 parsedNumCandidates=1 numTokens=45.524 parseTime=113.762 maxCellSize=1 fallOffBeam=0 totalDerivs=4120.429 numOfFeaturizedDerivs=4120.429
          }
          iter=0.train: example 21/72: data/taxes.examples:41 {
            Example: If Form 2210 is present, then Form 1040, Line 79 'EsPenaltyAmt' must be equal to Form 2210, Line 17 'PenaltyAmt' or Form 2210, Line 27 'TotalPenaltyAmt'. {
              Tokens: [if, form, 2210, is, present, ,, then, form, 1040, ,, line, 79, `, espenaltyamt, ', must, be, equal, to, form, 2210, ,, line, 17, `, penaltyamt, ', or, form, 2210, ,, line, 27, `, totalpenaltyamt, ', .]
              Lemmatized tokens: [if, form, 2210, i, present, ,, then, form, 1040, ,, line, 79, `, espenaltyamt, ', must, be, equal, to, form, 2210, ,, line, 17, `, penaltyamt, ', or, form, 2210, ,, line, 27, `, totalpenaltyamt, ', .]
              POS tags: [NNP, NNP, CD, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 2210, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, 79, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 2210, UNK, UNK, 17, UNK, UNK, UNK, UNK, UNK, 2210, UNK, UNK, 27, UNK, UNK, UNK, UNK]
              targetValue: (string "has_value( form2210 ) & ~( same( esPaneltyAmt,form2210PentaltyAmt,Y ) | same( esPaneltyAmt,form2210TotalPenaltyAmt ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=37 parseTime=10 maxCellSize=1 fallOffBeam=0 totalDerivs=1755 numOfFeaturizedDerivs=1755
            Cumulative(iter=0.train): correct=0.045 oracle=0.045 partCorrect=0.045 partOracle=0.045 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.091 numCandidates=0.091 parsedNumCandidates=1 numTokens=45.136 parseTime=109.045 maxCellSize=1 fallOffBeam=0 totalDerivs=4012.909 numOfFeaturizedDerivs=4012.909
          }
          iter=0.train: example 22/72: data/taxes.examples:32 {
            Example: If Form 1040, Line 39b checkbox 'MustItemizeInd' is checked, then Line 3 checkbox Married {
              Tokens: [if, form, 1040, ,, line, 39b, checkbox, `, mustitemizeind, ', is, checked, ,, then, line, 3, checkbox, married]
              Lemmatized tokens: [if, form, 1040, ,, line, 39b, checkbox, `, mustitemizeind, ', i, checked, ,, then, line, 3, checkbox, married]
              POS tags: [NNP, NNP, CD, UNK, NNP, UNK, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 3, UNK, UNK]
              targetValue: (string "has_value( mustItemizeInd ) &  ~value( individualReturnFilingStatusCd,3 )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=18 parseTime=2 maxCellSize=1 fallOffBeam=0 totalDerivs=506 numOfFeaturizedDerivs=506
            Cumulative(iter=0.train): correct=0.043 oracle=0.043 partCorrect=0.043 partOracle=0.043 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.087 numCandidates=0.087 parsedNumCandidates=1 numTokens=43.957 parseTime=104.391 maxCellSize=1 fallOffBeam=0 totalDerivs=3860.435 numOfFeaturizedDerivs=3860.435
          }
          iter=0.train: example 23/72: data/taxes.examples:7 {
            Example: If Form 1040, Line 3 checkbox Married {
              Tokens: [if, form, 1040, ,, line, 3, checkbox, married]
              Lemmatized tokens: [if, form, 1040, ,, line, 3, checkbox, married]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 3, UNK, UNK]
              targetValue: (string "value( individualReturnFilingStatusCd,3 ) & has_value( exemptSpouseInd ) &  ~( has_value( primarySSN ) & has_value( spouseSSN ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=8 parseTime=0 maxCellSize=1 fallOffBeam=0 totalDerivs=99 numOfFeaturizedDerivs=99
            Cumulative(iter=0.train): correct=0.042 oracle=0.042 partCorrect=0.042 partOracle=0.042 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.083 numCandidates=0.083 parsedNumCandidates=1 numTokens=42.458 parseTime=100.042 maxCellSize=1 fallOffBeam=0 totalDerivs=3703.708 numOfFeaturizedDerivs=3703.708
          }
          iter=0.train: example 24/72: data/taxes.examples:26 {
            Example: If any of the following Form 1040 fields have a value, then all of these fields must have a value: Line 76b 'RoutingTransitNum', Line 76c 'BankAccountTypeCd', Line 76d 'DepositorAccountNum'. {
              Tokens: [if, any, of, the, following, form, 1040, fields, have, a, value, ,, then, all, of, these, fields, must, have, a, value:, line, 76b, `, routingtransitnum, ', ,, line, 76c, `, bankaccounttypecd, ', ,, line, 76d, `, depositoraccountnum, ', .]
              Lemmatized tokens: [if, any, of, the, following, form, 1040, field, have, a, value, ,, then, all, of, these, field, must, have, a, value:, line, 76b, `, routingtransitnum, ', ,, line, 76c, `, bankaccounttypecd, ', ,, line, 76d, `, depositoraccountnum, ', .]
              POS tags: [NNP, UNK, UNK, UNK, UNK, NNP, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, UNK, UNK, NNP, '', UNK, NNP, UNK, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK]
              NER tags: [UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 76d, UNK, UNK, UNK, UNK]
              targetValue: (string "( has_value( routingTransitNum ) & ~has_value( bankAccountTypeCd ) | ~has_value( depositorAccountNum ) ) |\n                              ( has_value( bankAccountTypeCd ) & ~has_value( routingTransitNum ) | ~has_value( depositorAccountNum ) ) |\n                              ( has_value( depositAccountNum ) & ~has_value( routingTransitNum ) | ~has_value( bankAccountTypeCd ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=39 parseTime=9 maxCellSize=1 fallOffBeam=0 totalDerivs=1763 numOfFeaturizedDerivs=1763
            Cumulative(iter=0.train): correct=0.040 oracle=0.040 partCorrect=0.040 partOracle=0.040 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.080 numCandidates=0.080 parsedNumCandidates=1 numTokens=42.320 parseTime=96.400 maxCellSize=1 fallOffBeam=0 totalDerivs=3626.080 numOfFeaturizedDerivs=3626.080
          }
          iter=0.train: example 25/72: data/taxes.examples:28 {
            Example: If 'PrimarySSN' in the Return Header is an ITIN, then Form 1040, Line 66a 'EarnedIncomeCreditAmt' must be equal to zero if an amount is entered. {
              Tokens: [if, `, primaryssn, ', in, the, return, header, is, an, itin, ,, then, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', must, be, equal, to, zero, if, an, amount, is, entered, .]
              Lemmatized tokens: [if, `, primaryssn, ', in, the, return, header, i, an, itin, ,, then, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', must, be, equal, to, zero, if, an, amount, i, entered, .]
              POS tags: [NNP, UNK, NNP, '', UNK, UNK, NNP, NNP, UNK, UNK, NNP, UNK, UNK, NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "iTin( primarySSN ) & non_zero( earnedIncomeCreditAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 1 candidates {
              Pred@0000: (derivation (formula (call + (call + (string "iTin(") (string primaryssn) (string ")")) (string " & ~") (call + (string "~non_zero(") (string earnedincomecreditamt) (string ")")))) (value (string "iTin(primaryssn) & ~~non_zero(earnedincomecreditamt)")) (type fb:type.any)) [score=0, prob=1, comp=0]
            }
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=1 parsedNumCandidates=1 numTokens=32 parseTime=7 maxCellSize=1 fallOffBeam=0 totalDerivs=1323 numOfFeaturizedDerivs=1323
            Cumulative(iter=0.train): correct=0.038 oracle=0.038 partCorrect=0.038 partOracle=0.038 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.115 numCandidates=0.115 parsedNumCandidates=1 numTokens=41.923 parseTime=92.962 maxCellSize=1 fallOffBeam=0 totalDerivs=3537.500 numOfFeaturizedDerivs=3537.500
          }
          iter=0.train: example 26/72: data/taxes.examples:1 {
            Example: If Form 1040, Line 75 'OverpaidAmt' has a non-zero value and Line 79 'EsPenaltyAmt' is less than or equal to Line 75 'OverpaidAmt', then Line 78 'OwedAmt' must be equal to zero if an amount is entered. {
              Tokens: [if, form, 1040, ,, line, 75, `, overpaidamt, ', has, a, non, zero, value, and, line, 79, `, espenaltyamt, ', is, less, than, or, equal, to, line, 75, `, overpaidamt, ', ,, then, line, 78, `, owedamt, ', must, be, equal, to, zero, if, an, amount, is, entered, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 75, `, overpaidamt, ', ha, a, non, zero, value, and, line, 79, `, espenaltyamt, ', i, les, than, or, equal, to, line, 75, `, overpaidamt, ', ,, then, line, 78, `, owedamt, ', must, be, equal, to, zero, if, an, amount, i, entered, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 75, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, 79, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 75, UNK, UNK, UNK, UNK, UNK, UNK, 78, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "non_zero( overpaidAmt ) & less_than_equal_to( esPenaltyAmt,overpaidAmt ) & has_value( owedAmt ) & non_zero( owedAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 1 candidates {
              Pred@0000: (derivation (formula (call + (call + (call + (string "non_zero(") (string overpaidamt) (string ")")) (string " & ") (call + (string "less_than_equal_to(") (string espenaltyamt) (string ,) (string overpaidamt) (string ")"))) (string " & ~") (call + (string "~non_zero(") (string owedamt) (string ")")))) (value (string "non_zero(overpaidamt) & less_than_equal_to(espenaltyamt,overpaidamt) & ~~non_zero(owedamt)")) (type fb:type.any)) [score=0, prob=1, comp=0]
            }
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=1 parsedNumCandidates=1 numTokens=49 parseTime=24 maxCellSize=1 fallOffBeam=0 totalDerivs=2895 numOfFeaturizedDerivs=2895
            Cumulative(iter=0.train): correct=0.037 oracle=0.037 partCorrect=0.037 partOracle=0.037 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.148 numCandidates=0.148 parsedNumCandidates=1 numTokens=42.185 parseTime=90.407 maxCellSize=1 fallOffBeam=0 totalDerivs=3513.704 numOfFeaturizedDerivs=3513.704
          }
          iter=0.train: example 27/72: data/taxes.examples:35 {
            Example: If Form 1040, Line 16a 'PensionsAnnuitiesAmt' or Line 16b 'TotalTaxablePensionsAmt' has a non-zero value, then both amounts cannot be equal. {
              Tokens: [if, form, 1040, ,, line, 16a, `, pensionsannuitiesamt, ', or, line, 16b, `, totaltaxablepensionsamt, ', has, a, non, zero, value, ,, then, both, amounts, cannot, be, equal, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 16a, `, pensionsannuitiesamt, ', or, line, 16b, `, totaltaxablepensionsamt, ', ha, a, non, zero, value, ,, then, both, amount, cannot, be, equal, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "non_zero( pensionsAnnuitiesAmt ) & non_zero( totalTaxablePensionsAmt ) & same( pensionsAnnuitiesAmt,totalTaxablePensionsAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=28 parseTime=4 maxCellSize=1 fallOffBeam=0 totalDerivs=995 numOfFeaturizedDerivs=995
            Cumulative(iter=0.train): correct=0.036 oracle=0.036 partCorrect=0.036 partOracle=0.036 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.143 numCandidates=0.143 parsedNumCandidates=1 numTokens=41.679 parseTime=87.321 maxCellSize=1 fallOffBeam=0 totalDerivs=3423.750 numOfFeaturizedDerivs=3423.750
          }
          iter=0.train: example 28/72: data/taxes.examples:61 {
            Example: If Form 1040, Line 59 'retirementTaxPlanLiteralCd' has the value NO, then 'TaxOnIRAsAmt' must have a value greater than zero. {
              Tokens: [if, form, 1040, ,, line, 59, `, retirementtaxplanliteralcd, ', has, the, value, no, ,, then, `, taxonirasamt, ', must, have, a, value, greater, than, zero, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 59, `, retirementtaxplanliteralcd, ', ha, the, value, no, ,, then, `, taxonirasamt, ', must, have, a, value, greater, than, zero, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, UNK, '', UNK, UNK, UNK, NNP, UNK, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, CD, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 59, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK]
              targetValue: (string "value( retirementTaxPlanLiteralCd,no ) & ~greater_than( taxOnIRAAmt,0 )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=26 parseTime=3 maxCellSize=1 fallOffBeam=0 totalDerivs=889 numOfFeaturizedDerivs=889
            Cumulative(iter=0.train): correct=0.034 oracle=0.034 partCorrect=0.034 partOracle=0.034 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.138 numCandidates=0.138 parsedNumCandidates=1 numTokens=41.138 parseTime=84.414 maxCellSize=1 fallOffBeam=0 totalDerivs=3336.345 numOfFeaturizedDerivs=3336.345
          }
          iter=0.train: example 29/72: data/taxes.examples:6 {
            Example: If Form 1040, Line 2 checkbox Married {
              Tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              Lemmatized tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 2, UNK, UNK]
              targetValue: (string "value( individualReturnFilingStatusCd,2 ) &  ~( has_value( primarySSN ) & has_value( spouseSSN,X ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=8 parseTime=0 maxCellSize=1 fallOffBeam=0 totalDerivs=99 numOfFeaturizedDerivs=99
            Cumulative(iter=0.train): correct=0.033 oracle=0.033 partCorrect=0.033 partOracle=0.033 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.133 numCandidates=0.133 parsedNumCandidates=1 numTokens=40.033 parseTime=81.600 maxCellSize=1 fallOffBeam=0 totalDerivs=3228.433 numOfFeaturizedDerivs=3228.433
          }
          iter=0.train: example 30/72: data/taxes.examples:12 {
            Example: If Form 1040, Line 66a 'EICEligibilityLiteralCd' has the value 'NO', then Line 66a 'EarnedIncomeCreditAmt' must be equal to zero or not be present. {
              Tokens: [if, form, 1040, ,, line, 66a, `, eiceligibilityliteralcd, ', has, the, value, `, no, ', ,, then, line, 66a, `, earnedincomecreditamt, ', must, be, equal, to, zero, or, not, be, present, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 66a, `, eiceligibilityliteralcd, ', ha, the, value, `, no, ', ,, then, line, 66a, `, earnedincomecreditamt, ', must, be, equal, to, zero, or, not, be, present, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, '', UNK, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "value( eICEligibilityLiteralCd,NO ) & non_zero( earnedIncomeCreditAmt ) & has_value( earnedIncomeCreditAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 1 candidates {
              Pred@0000: (derivation (formula (call + (call + (string "value(") (string eiceligibilityliteralcd) (string ,) (string no) (string ")")) (string " & ~") (call + (string "~non_zero(") (string earnedincomecreditamt) (string ")")))) (value (string "value(eiceligibilityliteralcd,no) & ~~non_zero(earnedincomecreditamt)")) (type fb:type.any)) [score=0, prob=1, comp=0]
            }
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=1 parsedNumCandidates=1 numTokens=32 parseTime=8 maxCellSize=1 fallOffBeam=0 totalDerivs=1368 numOfFeaturizedDerivs=1368
            Cumulative(iter=0.train): correct=0.032 oracle=0.032 partCorrect=0.032 partOracle=0.032 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.161 numCandidates=0.161 parsedNumCandidates=1 numTokens=39.774 parseTime=79.226 maxCellSize=1 fallOffBeam=0 totalDerivs=3168.419 numOfFeaturizedDerivs=3168.419
          }
          iter=0.train: example 31/72: data/taxes.examples:11 {
            Example: Form 1040, Line 6c( 2 ), each 'DependentSSN' provided must not be the same as the 'PrimarySSN' or the 'SpouseSSN' in the Return Header. {
              Tokens: [form, 1040, ,, line, 6c(, 2, ), ,, each, `, dependentssn, ', provided, must, not, be, the, same, as, the, `, primaryssn, ', or, the, `, spousessn, ', in, the, return, header, .]
              Lemmatized tokens: [form, 1040, ,, line, 6c(, 2, ), ,, each, `, dependentssn, ', provided, must, not, be, the, same, a, the, `, primaryssn, ', or, the, `, spousessn, ', in, the, return, header, .]
              POS tags: [NNP, CD, UNK, NNP, UNK, CD, UNK, UNK, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, '', UNK, UNK, UNK, NNP, '', UNK, UNK, NNP, NNP, UNK]
              NER tags: [UNK, NUMBER, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, 1040, UNK, UNK, UNK, 2, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "has_value( depSSN( I ) ) & ( same( depSSN( I ),primarySSN ) | same( depSSN( I ),spouseSSN ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=33 parseTime=4 maxCellSize=1 fallOffBeam=0 totalDerivs=1258 numOfFeaturizedDerivs=1258
            Cumulative(iter=0.train): correct=0.031 oracle=0.031 partCorrect=0.031 partOracle=0.031 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.156 numCandidates=0.156 parsedNumCandidates=1 numTokens=39.563 parseTime=76.875 maxCellSize=1 fallOffBeam=0 totalDerivs=3108.719 numOfFeaturizedDerivs=3108.719
          }
          iter=0.train: example 32/72: data/taxes.examples:22 {
            Example: Each 'RecipientSSN' that has a value on Form 1040, Line 31b must be within the valid range of SSN/ITIN and must not be an ATIN. {
              Tokens: [each, `, recipientssn, ', that, has, a, value, on, form, 1040, ,, line, 31b, must, be, within, the, valid, range, of, ssn/itin, and, must, not, be, an, atin, .]
              Lemmatized tokens: [each, `, recipientssn, ', that, ha, a, value, on, form, 1040, ,, line, 31b, must, be, within, the, valid, range, of, ssn/itin, and, must, not, be, an, atin, .]
              POS tags: [NNP, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, UNK, UNK, UNK, UNK, UNK, NNP, UNK]
              NER tags: [UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "~validSSN( recepientSSN( I ) ) & aTIN( recepientSSN( I ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=29 parseTime=3 maxCellSize=1 fallOffBeam=0 totalDerivs=956 numOfFeaturizedDerivs=956
            Cumulative(iter=0.train): correct=0.030 oracle=0.030 partCorrect=0.030 partOracle=0.030 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.152 numCandidates=0.152 parsedNumCandidates=1 numTokens=39.242 parseTime=74.636 maxCellSize=1 fallOffBeam=0 totalDerivs=3043.485 numOfFeaturizedDerivs=3043.485
          }
          iter=0.train: example 33/72: data/taxes.examples:25 {
            Example: If Form 1040, Line 13 checkbox 'CapitalDistributionInd' is not checked and Line 13 'CapitalGainLossAmt' has a non-zero value, then Schedule D ( Form 1040 ) must be attached. {
              Tokens: [if, form, 1040, ,, line, 13, checkbox, `, capitaldistributionind, ', is, not, checked, and, line, 13, `, capitalgainlossamt, ', has, a, non, zero, value, ,, then, schedule, d, (, form, 1040, ), must, be, attached, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 13, checkbox, `, capitaldistributionind, ', i, not, checked, and, line, 13, `, capitalgainlossamt, ', ha, a, non, zero, value, ,, then, schedule, d, (, form, 1040, ), must, be, attached, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, NNP, NNP, UNK, NNP, CD, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 13, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 13, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "~has_value( capitalDistributionInd ) & non_zero( capitalGainLossAmt ) & ~has_value( ScheduleD )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=36 parseTime=11 maxCellSize=1 fallOffBeam=0 totalDerivs=1629 numOfFeaturizedDerivs=1629
            Cumulative(iter=0.train): correct=0.029 oracle=0.029 partCorrect=0.029 partOracle=0.029 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.147 numCandidates=0.147 parsedNumCandidates=1 numTokens=39.147 parseTime=72.765 maxCellSize=1 fallOffBeam=0 totalDerivs=3001.882 numOfFeaturizedDerivs=3001.882
          }
          iter=0.train: example 34/72: data/taxes.examples:63 {
            Example: Form 1040, Line 50 'EducationCreditAmt' must be equal to Form 8863, Line 19 'NonrefundableEducationCrAmt'. {
              Tokens: [form, 1040, ,, line, 50, `, educationcreditamt, ', must, be, equal, to, form, 8863, ,, line, 19, `, nonrefundableeducationcramt, ', .]
              Lemmatized tokens: [form, 1040, ,, line, 50, `, educationcreditamt, ', must, be, equal, to, form, 8863, ,, line, 19, `, nonrefundableeducationcramt, ', .]
              POS tags: [NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK]
              NER tags: [UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK]
              NER values: [UNK, 1040, UNK, UNK, 50, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 8863, UNK, UNK, 19, UNK, UNK, UNK, UNK]
              targetValue: (string "~same( educationCreditAmt,nonRefundableEducationCrAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 1 candidates {
              True@0000: (derivation (formula (call + (string ~) (call + (string "same(") (string educationcreditamt) (string ,) (string nonrefundableeducationcramt) (string ")")))) (value (string "~same(educationcreditamt,nonrefundableeducationcramt)")) (type fb:type.any)) [score=0, prob=1, comp=1]
              Pred@0000: (derivation (formula (call + (string ~) (call + (string "same(") (string educationcreditamt) (string ,) (string nonrefundableeducationcramt) (string ")")))) (value (string "~same(educationcreditamt,nonrefundableeducationcramt)")) (type fb:type.any)) [score=0, prob=1, comp=1]
            }
            Current: correct=1 oracle=1 partCorrect=1 partOracle=1 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=1 numCandidates=1 parsedNumCandidates=1 numTokens=21 parseTime=3 maxCellSize=1 fallOffBeam=0 totalDerivs=717 numOfFeaturizedDerivs=717
            Cumulative(iter=0.train): correct=0.057 oracle=0.057 partCorrect=0.057 partOracle=0.057 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.171 numCandidates=0.171 parsedNumCandidates=1 numTokens=38.629 parseTime=70.771 maxCellSize=1 fallOffBeam=0 totalDerivs=2936.600 numOfFeaturizedDerivs=2936.600
          }
          iter=0.train: example 35/72: data/taxes.examples:52 {
            Example: Form 1040, Line 74 'TotalPaymentsAmt' must be equal to the sum of the following: Line 64 'WithholdingTaxAmt' and Line 65 'EstimatedTaxPaymentsAmt' and Line 66a 'EarnedIncomeCreditAmt' and Line 67 'AdditionalChildTaxCreditAmt' and Line 68 'RefundableAmerOppCreditAmt' and Line 69 'ReconciledPremiumTaxCreditAmt' and Line 70 'RequestForExtensionAmt' and Line 71 'ExcessSocSecAndTier1RRTATaxAmt' and Line 72 'TotalFuelTaxCreditAmt' and Line 73 'OtherPaymentsAmt' and Line 74 'form8689Amt'. {
              Tokens: [form, 1040, ,, line, 74, `, totalpaymentsamt, ', must, be, equal, to, the, sum, of, the, following:, line, 64, `, withholdingtaxamt, ', and, line, 65, `, estimatedtaxpaymentsamt, ', and, line, 66a, `, earnedincomecreditamt, ', and, line, 67, `, additionalchildtaxcreditamt, ', and, line, 68, `, refundableameroppcreditamt, ', and, line, 69, `, reconciledpremiumtaxcreditamt, ', and, line, 70, `, requestforextensionamt, ', and, line, 71, `, excesssocsecandtier1rrtataxamt, ', and, line, 72, `, totalfueltaxcreditamt, ', and, line, 73, `, otherpaymentsamt, ', and, line, 74, `, form8689amt, ', .]
              Lemmatized tokens: [form, 1040, ,, line, 74, `, totalpaymentsamt, ', must, be, equal, to, the, sum, of, the, following:, line, 64, `, withholdingtaxamt, ', and, line, 65, `, estimatedtaxpaymentsamt, ', and, line, 66a, `, earnedincomecreditamt, ', and, line, 67, `, additionalchildtaxcreditamt, ', and, line, 68, `, refundableameroppcreditamt, ', and, line, 69, `, reconciledpremiumtaxcreditamt, ', and, line, 70, `, requestforextensionamt, ', and, line, 71, `, excesssocsecandtier1rrtataxamt, ', and, line, 72, `, totalfueltaxcreditamt, ', and, line, 73, `, otherpaymentsamt, ', and, line, 74, `, form8689amt, ', .]
              POS tags: [NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, UNK, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, UNK, '', UNK]
              NER tags: [UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK]
              NER values: [UNK, 1040, UNK, UNK, 74, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 64, UNK, UNK, UNK, UNK, UNK, 65, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 67, UNK, UNK, UNK, UNK, UNK, 68, UNK, UNK, UNK, UNK, UNK, 69, UNK, UNK, UNK, UNK, UNK, 70, UNK, UNK, UNK, UNK, UNK, 71, UNK, UNK, UNK, UNK, UNK, 72, UNK, UNK, UNK, UNK, UNK, 73, UNK, UNK, UNK, UNK, UNK, 74, UNK, UNK, UNK, UNK]
              targetValue: (string "~plus( withholdingTaxAmt,( estimatedTaxPaymentsAmt,earnedIncomeCreditAmt,additionalChildTaxCreditAmt,refundableAmerOppCreditAmt,reconciledPremiumTaxCreditAmt,requestForExtensionAmt,excessSocSecAndTier1RRTATaxAmt,totalFuelTaxCreditAmt,otherPaymentsAmt,withholdingTaxAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=83 parseTime=104 maxCellSize=1 fallOffBeam=0 totalDerivs=7724 numOfFeaturizedDerivs=7724
            Cumulative(iter=0.train): correct=0.056 oracle=0.056 partCorrect=0.056 partOracle=0.056 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.167 numCandidates=0.167 parsedNumCandidates=1 numTokens=39.861 parseTime=71.694 maxCellSize=1 fallOffBeam=0 totalDerivs=3069.583 numOfFeaturizedDerivs=3069.583
          }
          iter=0.train: example 36/72: data/taxes.examples:45 {
            Example: If Form 1040, Line 51 'RtrSavingsContributionsCrAmt' has a non-zero value, then Form 8880 must be attached. {
              Tokens: [if, form, 1040, ,, line, 51, `, rtrsavingscontributionscramt, ', has, a, non, zero, value, ,, then, form, 8880, must, be, attached, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 51, `, rtrsavingscontributionscramt, ', ha, a, non, zero, value, ,, then, form, 8880, must, be, attached, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, NNP, CD, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 51, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, 8880, UNK, UNK, UNK, UNK]
              targetValue: (string "non_zero( rtrSavingsContributionsCrAmt ) & ~has_value( form8880 )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=22 parseTime=2 maxCellSize=1 fallOffBeam=0 totalDerivs=653 numOfFeaturizedDerivs=653
            Cumulative(iter=0.train): correct=0.054 oracle=0.054 partCorrect=0.054 partOracle=0.054 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.162 numCandidates=0.162 parsedNumCandidates=1 numTokens=39.378 parseTime=69.811 maxCellSize=1 fallOffBeam=0 totalDerivs=3004.270 numOfFeaturizedDerivs=3004.270
          }
          iter=0.train: example 37/72: data/taxes.examples:57 {
            Example: If Form 1040, Line 78 'OwedAmt' has a non-zero value and Line 79 'EsPenaltyAmt' has a zero value or has no entry, then Line 63 'TotalTaxAmt' must be greater than Line 74 'TotalPaymentsAmt'. {
              Tokens: [if, form, 1040, ,, line, 78, `, owedamt, ', has, a, non, zero, value, and, line, 79, `, espenaltyamt, ', has, a, zero, value, or, has, no, entry, ,, then, line, 63, `, totaltaxamt, ', must, be, greater, than, line, 74, `, totalpaymentsamt, ', .]
              Lemmatized tokens: [if, form, 1040, ,, line, 78, `, owedamt, ', ha, a, non, zero, value, and, line, 79, `, espenaltyamt, ', ha, a, zero, value, or, ha, no, entry, ,, then, line, 63, `, totaltaxamt, ', must, be, greater, than, line, 74, `, totalpaymentsamt, ', .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 78, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, 79, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 63, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 74, UNK, UNK, UNK, UNK]
              targetValue: (string "non_zero( owedAmt ) & ( same( esPenaltyAmt,0 ) | ~has_value( esPenaltyAmt ) ) & ~greater_than( totalTaxAmt,totalPaymentsAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=45 parseTime=18 maxCellSize=1 fallOffBeam=0 totalDerivs=2444 numOfFeaturizedDerivs=2444
            Cumulative(iter=0.train): correct=0.053 oracle=0.053 partCorrect=0.053 partOracle=0.053 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.158 numCandidates=0.158 parsedNumCandidates=1 numTokens=39.526 parseTime=68.447 maxCellSize=1 fallOffBeam=0 totalDerivs=2989.526 numOfFeaturizedDerivs=2989.526
          }
          iter=0.train: example 38/72: data/taxes.examples:53 {
            Example: If Form 1040, Line 66a 'EarnedIncomeCreditAmt' is greater than 503, then Schedule EIC ( Form 1040A or 1040 ) must be present in the return. {
              Tokens: [if, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', is, greater, than, 503, ,, then, schedule, eic, (, form, 1040a, or, 1040, ), must, be, present, in, the, return, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', i, greater, than, 503, ,, then, schedule, eic, (, form, 1040a, or, 1040, ), must, be, present, in, the, return, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, NNP, NNP, UNK, NNP, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 503, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "greater_than( earnedIncomeCreditAmt,503 ) & ~has_value( scheduleEIC )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=30 parseTime=7 maxCellSize=1 fallOffBeam=0 totalDerivs=1120 numOfFeaturizedDerivs=1120
            Cumulative(iter=0.train): correct=0.051 oracle=0.051 partCorrect=0.051 partOracle=0.051 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.154 numCandidates=0.154 parsedNumCandidates=1 numTokens=39.282 parseTime=66.872 maxCellSize=1 fallOffBeam=0 totalDerivs=2941.590 numOfFeaturizedDerivs=2941.590
          }
          iter=0.train: example 39/72: data/taxes.examples:31 {
            Example: If Form 1040, Line 2 checkbox Married {
              Tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              Lemmatized tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 2, UNK, UNK]
              targetValue: (string "value( individualReturnFilingStatusCd,2 )  & iTIN( spouseSSN ) & has_value( formScheduleEIC )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=8 parseTime=0 maxCellSize=1 fallOffBeam=0 totalDerivs=99 numOfFeaturizedDerivs=99
            Cumulative(iter=0.train): correct=0.050 oracle=0.050 partCorrect=0.050 partOracle=0.050 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.150 numCandidates=0.150 parsedNumCandidates=1 numTokens=38.500 parseTime=65.200 maxCellSize=1 fallOffBeam=0 totalDerivs=2870.525 numOfFeaturizedDerivs=2870.525
          }
          iter=0.train: example 40/72: data/taxes.examples:39 {
            Example: If Form 1040, Line 6c 'ChldNotLivingWithYouCnt' has a non-zero value, there must be at least one dependent listed in Line 6c that has its Line 6c( 3 ) 'DependentRelationshipCd' from among the following values: ( STEPCHILD or HALF {
              Tokens: [if, form, 1040, ,, line, 6c, `, chldnotlivingwithyoucnt, ', has, a, non, zero, value, ,, there, must, be, at, least, one, dependent, listed, in, line, 6c, that, has, its, line, 6c(, 3, ), `, dependentrelationshipcd, ', from, among, the, following, values:, (, stepchild, or, half]
              Lemmatized tokens: [if, form, 1040, ,, line, 6c, `, chldnotlivingwithyoucnt, ', ha, a, non, zero, value, ,, there, must, be, at, least, one, dependent, listed, in, line, 6c, that, ha, it, line, 6c(, 3, ), `, dependentrelationshipcd, ', from, among, the, following, values:, (, stepchild, or, half]
              POS tags: [NNP, NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, CD, UNK, UNK, UNK, NNP, UNK, UNK, UNK, UNK, NNP, UNK, CD, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, NNP, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 3, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "non_zero( chldNotLivingWithYouCnt ) & ~( same( dependentRelationshipCd( I ),stepChild ) | same( dependentRelationshipCd( I ),halfBrother ) | same( dependentRelationshipCd( I ),halfSister ) | same( dependentRelationshipCd( I ),stepBrother ) | same( dependentRelationshipCd( I ),stepSister ) | same( dependentRelationshipCd( I ),fosterChild ) | same( dependentRelationshipCd( I ),grandChild ) | same( dependentRelationshipCd( I ),brother ) |same( dependentRelationshipCd( I ),sister ) | same( dependentRelationshipCd( I ),nephew ) | same( dependentRelationshipCd( I ),niece ) | same( dependentRelationshipCd( I ),son ) | same( dependentRelationshipCd( I ),daughter )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=45 parseTime=12 maxCellSize=1 fallOffBeam=0 totalDerivs=2285 numOfFeaturizedDerivs=2285
            Cumulative(iter=0.train): correct=0.049 oracle=0.049 partCorrect=0.049 partOracle=0.049 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.146 numCandidates=0.146 parsedNumCandidates=1 numTokens=38.659 parseTime=63.902 maxCellSize=1 fallOffBeam=0 totalDerivs=2856.244 numOfFeaturizedDerivs=2856.244
          }
          iter=0.train: example 41/72: data/taxes.examples:27 {
            Example: If Form 1040, Line 75 'OverpaidAmt' has a non-zero value, then Line 74 'TotalPaymentsAmt' must be greater than Line 63 'TotalTaxAmt'. {
              Tokens: [if, form, 1040, ,, line, 75, `, overpaidamt, ', has, a, non, zero, value, ,, then, line, 74, `, totalpaymentsamt, ', must, be, greater, than, line, 63, `, totaltaxamt, ', .]
              Lemmatized tokens: [if, form, 1040, ,, line, 75, `, overpaidamt, ', ha, a, non, zero, value, ,, then, line, 74, `, totalpaymentsamt, ', must, be, greater, than, line, 63, `, totaltaxamt, ', .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 75, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, 74, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 63, UNK, UNK, UNK, UNK]
              targetValue: (string "non_zero( overpaidAmt ) & ~greater_than( totalPaymentsAmt,totalTaxAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 1 candidates {
              True@0000: (derivation (formula (call + (call + (string "non_zero(") (string overpaidamt) (string ")")) (string " & ~") (call + (string "greater_than(") (string totalpaymentsamt) (string ,) (string totaltaxamt) (string ")")))) (value (string "non_zero(overpaidamt) & ~greater_than(totalpaymentsamt,totaltaxamt)")) (type fb:type.any)) [score=0, prob=1, comp=1]
              Pred@0000: (derivation (formula (call + (call + (string "non_zero(") (string overpaidamt) (string ")")) (string " & ~") (call + (string "greater_than(") (string totalpaymentsamt) (string ,) (string totaltaxamt) (string ")")))) (value (string "non_zero(overpaidamt) & ~greater_than(totalpaymentsamt,totaltaxamt)")) (type fb:type.any)) [score=0, prob=1, comp=1]
            }
            Current: correct=1 oracle=1 partCorrect=1 partOracle=1 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=1 numCandidates=1 parsedNumCandidates=1 numTokens=31 parseTime=7 maxCellSize=1 fallOffBeam=0 totalDerivs=1289 numOfFeaturizedDerivs=1289
            Cumulative(iter=0.train): correct=0.071 oracle=0.071 partCorrect=0.071 partOracle=0.071 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.167 numCandidates=0.167 parsedNumCandidates=1 numTokens=38.476 parseTime=62.548 maxCellSize=1 fallOffBeam=0 totalDerivs=2818.929 numOfFeaturizedDerivs=2818.929
          }
          iter=0.train: example 42/72: data/taxes.examples:30 {
            Example: If Form 1040, Line 2 checkbox Married {
              Tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              Lemmatized tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 2, UNK, UNK]
              targetValue: (string "value( individualReturnFilingStatusCd,2 )  & iTIN( spouseSSN ) & non_zero( earnedIncomeCreditAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=8 parseTime=0 maxCellSize=1 fallOffBeam=0 totalDerivs=99 numOfFeaturizedDerivs=99
            Cumulative(iter=0.train): correct=0.070 oracle=0.070 partCorrect=0.070 partOracle=0.070 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.163 numCandidates=0.163 parsedNumCandidates=1 numTokens=37.767 parseTime=61.093 maxCellSize=1 fallOffBeam=0 totalDerivs=2755.674 numOfFeaturizedDerivs=2755.674
          }
          iter=0.train: example 43/72: data/taxes.examples:65 {
            Example: Form 1040, Line 60b 'FirstTimeHmByrRepaymentAmt' must not be less than zero, if an amount is entered. {
              Tokens: [form, 1040, ,, line, 60b, `, firsttimehmbyrrepaymentamt, ', must, not, be, less, than, zero, ,, if, an, amount, is, entered, .]
              Lemmatized tokens: [form, 1040, ,, line, 60b, `, firsttimehmbyrrepaymentamt, ', must, not, be, les, than, zero, ,, if, an, amount, i, entered, .]
              POS tags: [NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "~greater_than( firstTimeHmByrRepaymentAmt,0 )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=21 parseTime=2 maxCellSize=1 fallOffBeam=0 totalDerivs=606 numOfFeaturizedDerivs=606
            Cumulative(iter=0.train): correct=0.068 oracle=0.068 partCorrect=0.068 partOracle=0.068 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.159 numCandidates=0.159 parsedNumCandidates=1 numTokens=37.386 parseTime=59.750 maxCellSize=1 fallOffBeam=0 totalDerivs=2706.818 numOfFeaturizedDerivs=2706.818
          }
          iter=0.train: example 44/72: data/taxes.examples:8 {
            Example: If Form 1040, Line 4 checkbox Head {
              Tokens: [if, form, 1040, ,, line, 4, checkbox, head]
              Lemmatized tokens: [if, form, 1040, ,, line, 4, checkbox, head]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 4, UNK, UNK]
              targetValue: (string "value( individualReturnFilingStatusCd,4 ) & has_value( exemptSpouseInd ) & ~( has_value( primarySSN ) & has_value( spouseSSN ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=8 parseTime=1 maxCellSize=1 fallOffBeam=0 totalDerivs=99 numOfFeaturizedDerivs=99
            Cumulative(iter=0.train): correct=0.067 oracle=0.067 partCorrect=0.067 partOracle=0.067 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.156 numCandidates=0.156 parsedNumCandidates=1 numTokens=36.733 parseTime=58.444 maxCellSize=1 fallOffBeam=0 totalDerivs=2648.867 numOfFeaturizedDerivs=2648.867
          }
          iter=0.train: example 45/72: data/taxes.examples:48 {
            Example: If Form 1040 Line 3 checkbox Married {
              Tokens: [if, form, 1040, line, 3, checkbox, married]
              Lemmatized tokens: [if, form, 1040, line, 3, checkbox, married]
              POS tags: [NNP, NNP, CD, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, 3, UNK, UNK]
              targetValue: (string "value( individualReturnFilingStatusCd,3 ) & has_value( earnedIncomeCreditAmt ) & ~same( earnedIncomeCreditAmt,0 )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=7 parseTime=0 maxCellSize=1 fallOffBeam=0 totalDerivs=76 numOfFeaturizedDerivs=76
            Cumulative(iter=0.train): correct=0.065 oracle=0.065 partCorrect=0.065 partOracle=0.065 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.152 numCandidates=0.152 parsedNumCandidates=1 numTokens=36.087 parseTime=57.174 maxCellSize=1 fallOffBeam=0 totalDerivs=2592.935 numOfFeaturizedDerivs=2592.935
          }
          iter=0.train: example 46/72: data/taxes.examples:23 {
            Example: Each 'RecipientSSN' provided on Form 1040, Line 31b must not be the same as 'PrimarySSN' in the Return Header. {
              Tokens: [each, `, recipientssn, ', provided, on, form, 1040, ,, line, 31b, must, not, be, the, same, as, `, primaryssn, ', in, the, return, header, .]
              Lemmatized tokens: [each, `, recipientssn, ', provided, on, form, 1040, ,, line, 31b, must, not, be, the, same, a, `, primaryssn, ', in, the, return, header, .]
              POS tags: [NNP, UNK, NNP, '', UNK, UNK, NNP, CD, UNK, NNP, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, '', UNK, UNK, NNP, NNP, UNK]
              NER tags: [UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "same( recepientSSN( I ),primarySSN )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=25 parseTime=2 maxCellSize=1 fallOffBeam=0 totalDerivs=751 numOfFeaturizedDerivs=751
            Cumulative(iter=0.train): correct=0.064 oracle=0.064 partCorrect=0.064 partOracle=0.064 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.149 numCandidates=0.149 parsedNumCandidates=1 numTokens=35.851 parseTime=56 maxCellSize=1 fallOffBeam=0 totalDerivs=2553.745 numOfFeaturizedDerivs=2553.745
          }
          iter=0.train: example 47/72: data/taxes.examples:60 {
            Example: If Form 1040, Line 52 'ChildTaxCreditAmt' or Line 67 'AdditionalChildTaxCreditAmt' has a non-zero value, then the sum of Line 52 and Line 67 cannot exceed an amount equal to $1000 times the number of qualifying children. {
              Tokens: [if, form, 1040, ,, line, 52, `, childtaxcreditamt, ', or, line, 67, `, additionalchildtaxcreditamt, ', has, a, non, zero, value, ,, then, the, sum, of, line, 52, and, line, 67, cannot, exceed, an, amount, equal, to, $1000, times, the, number, of, qualifying, children, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 52, `, childtaxcreditamt, ', or, line, 67, `, additionalchildtaxcreditamt, ', ha, a, non, zero, value, ,, then, the, sum, of, line, 52, and, line, 67, cannot, exceed, an, amount, equal, to, $1000, time, the, number, of, qualifying, children, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 52, UNK, UNK, UNK, UNK, UNK, 67, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 52, UNK, UNK, 67, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "non_zero( childTaxCreditAmt )  & \n                               greater_than( plus( childTaxCreditAmt,additionalChildTaxCreditAmt ),times( plus( chldWhoLivedWithYouCnt,chldNotLivingWithYouCnt ),1000 ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=44 parseTime=18 maxCellSize=1 fallOffBeam=0 totalDerivs=2201 numOfFeaturizedDerivs=2201
            Cumulative(iter=0.train): correct=0.063 oracle=0.063 partCorrect=0.063 partOracle=0.063 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.146 numCandidates=0.146 parsedNumCandidates=1 numTokens=36.021 parseTime=55.208 maxCellSize=1 fallOffBeam=0 totalDerivs=2546.396 numOfFeaturizedDerivs=2546.396
          }
          iter=0.train: example 48/72: data/taxes.examples:10 {
            Example: Form 1040, Line 6c( 2 ), each 'DependentSSN' provided must be unique among all the dependent SSNs in Line 6c( 2 ). {
              Tokens: [form, 1040, ,, line, 6c(, 2, ), ,, each, `, dependentssn, ', provided, must, be, unique, among, all, the, dependent, ssns, in, line, 6c(, 2, ), .]
              Lemmatized tokens: [form, 1040, ,, line, 6c(, 2, ), ,, each, `, dependentssn, ', provided, must, be, unique, among, all, the, dependent, ssn, in, line, 6c(, 2, ), .]
              POS tags: [NNP, CD, UNK, NNP, UNK, CD, UNK, UNK, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, UNK, NNP, UNK, CD, UNK, UNK]
              NER tags: [UNK, NUMBER, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, 1040, UNK, UNK, UNK, 2, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 2, UNK, UNK]
              targetValue: (string "has_value( depSSN( I ) ) & has_value( depSSN( J ) ) & same( depSSN( I ),depSSN( J ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=27 parseTime=2 maxCellSize=1 fallOffBeam=0 totalDerivs=841 numOfFeaturizedDerivs=841
            Cumulative(iter=0.train): correct=0.061 oracle=0.061 partCorrect=0.061 partOracle=0.061 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.143 numCandidates=0.143 parsedNumCandidates=1 numTokens=35.837 parseTime=54.122 maxCellSize=1 fallOffBeam=0 totalDerivs=2511.592 numOfFeaturizedDerivs=2511.592
          }
          iter=0.train: example 49/72: data/taxes.examples:50 {
            Example: Form 1040, Line 55 'TotalCreditsAmt' must be equal to the sum of the following: Line 48 'ForeignTaxCreditAmt' and Line 49 'CreditForChildAndDepdCareAmt' and Line 50 'EducationCreditAmt' and Line 51 'RtrSavingsContributionsCrAmt' and Line 52 'ChildTaxCreditAmt' and Line 53 'ResidentialEnergyCreditAmt' and Line 54 'OtherCreditsAmt'. {
              Tokens: [form, 1040, ,, line, 55, `, totalcreditsamt, ', must, be, equal, to, the, sum, of, the, following:, line, 48, `, foreigntaxcreditamt, ', and, line, 49, `, creditforchildanddepdcareamt, ', and, line, 50, `, educationcreditamt, ', and, line, 51, `, rtrsavingscontributionscramt, ', and, line, 52, `, childtaxcreditamt, ', and, line, 53, `, residentialenergycreditamt, ', and, line, 54, `, othercreditsamt, ', .]
              Lemmatized tokens: [form, 1040, ,, line, 55, `, totalcreditsamt, ', must, be, equal, to, the, sum, of, the, following:, line, 48, `, foreigntaxcreditamt, ', and, line, 49, `, creditforchildanddepdcareamt, ', and, line, 50, `, educationcreditamt, ', and, line, 51, `, rtrsavingscontributionscramt, ', and, line, 52, `, childtaxcreditamt, ', and, line, 53, `, residentialenergycreditamt, ', and, line, 54, `, othercreditsamt, ', .]
              POS tags: [NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK]
              NER tags: [UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK]
              NER values: [UNK, 1040, UNK, UNK, 55, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 48, UNK, UNK, UNK, UNK, UNK, 49, UNK, UNK, UNK, UNK, UNK, 50, UNK, UNK, UNK, UNK, UNK, 51, UNK, UNK, UNK, UNK, UNK, 52, UNK, UNK, UNK, UNK, UNK, 53, UNK, UNK, UNK, UNK, UNK, 54, UNK, UNK, UNK, UNK]
              targetValue: (string "~plus( foreignTaxCreditAmt,creditForChildAndDepdCareAmt,educationCreditAmt,rtrSavingsContributionsCrAmt,childTaxCreditAmt,residentialEnergyCreditAmt,totalCreditAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=59 parseTime=43 maxCellSize=1 fallOffBeam=0 totalDerivs=4080 numOfFeaturizedDerivs=4080
            Cumulative(iter=0.train): correct=0.060 oracle=0.060 partCorrect=0.060 partOracle=0.060 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.140 numCandidates=0.140 parsedNumCandidates=1 numTokens=36.300 parseTime=53.900 maxCellSize=1 fallOffBeam=0 totalDerivs=2542.960 numOfFeaturizedDerivs=2542.960
          }
          iter=0.train: example 50/72: data/taxes.examples:46 {
            Example: If Form 1040, Line 36 'OtherAdjustmentsTotalAmt' has a non-zero value or Other {
              Tokens: [if, form, 1040, ,, line, 36, `, otheradjustmentstotalamt, ', has, a, non, zero, value, or, other]
              Lemmatized tokens: [if, form, 1040, ,, line, 36, `, otheradjustmentstotalamt, ', ha, a, non, zero, value, or, other]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 36, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK]
              targetValue: (string "( non_zero( otherAdjustmentTotalAmt ) | has_value( otherAdjustmentsStatement ) )  & same( totalAdjustmentAmt,0 )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=16 parseTime=2 maxCellSize=1 fallOffBeam=0 totalDerivs=402 numOfFeaturizedDerivs=402
            Cumulative(iter=0.train): correct=0.059 oracle=0.059 partCorrect=0.059 partOracle=0.059 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.137 numCandidates=0.137 parsedNumCandidates=1 numTokens=35.902 parseTime=52.882 maxCellSize=1 fallOffBeam=0 totalDerivs=2500.980 numOfFeaturizedDerivs=2500.980
          }
          iter=0.train: example 51/72: data/taxes.examples:51 {
            Example: At least one of the following must have a non-zero value on Form 1040: Line 22 'TotalIncomeAmt' or Line 37 'AdjustedGrossIncomeAmt' or Line 44 'TaxAmt' or Line 55 'TotalCreditsAmt' or Line 63 'TotalTaxAmt' or Line 74 'TotalPaymentsAmt'. {
              Tokens: [at, least, one, of, the, following, must, have, a, non, zero, value, on, form, 1040:, line, 22, `, totalincomeamt, ', or, line, 37, `, adjustedgrossincomeamt, ', or, line, 44, `, taxamt, ', or, line, 55, `, totalcreditsamt, ', or, line, 63, `, totaltaxamt, ', or, line, 74, `, totalpaymentsamt, ', .]
              Lemmatized tokens: [at, least, one, of, the, following, must, have, a, non, zero, value, on, form, 1040:, line, 22, `, totalincomeamt, ', or, line, 37, `, adjustedgrossincomeamt, ', or, line, 44, `, taxamt, ', or, line, 55, `, totalcreditsamt, ', or, line, 63, `, totaltaxamt, ', or, line, 74, `, totalpaymentsamt, ', .]
              POS tags: [NNP, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, CD, UNK, UNK, NNP, UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK, NNP, CD, UNK, NNP, '', UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, 22, UNK, UNK, UNK, UNK, UNK, 37, UNK, UNK, UNK, UNK, UNK, 44, UNK, UNK, UNK, UNK, UNK, 55, UNK, UNK, UNK, UNK, UNK, 63, UNK, UNK, UNK, UNK, UNK, 74, UNK, UNK, UNK, UNK]
              targetValue: (string "same( totalIncomeAmt,0 ) & same( adjustedGrossIncomeAmt,0 ) & same( taxAmt,0 ) & same( totalCreditsAmt,0 ) & same( totalTaxAmt,0 ) & same( totalpaymentsAmt,0 )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=51 parseTime=13 maxCellSize=1 fallOffBeam=0 totalDerivs=3002 numOfFeaturizedDerivs=3002
            Cumulative(iter=0.train): correct=0.058 oracle=0.058 partCorrect=0.058 partOracle=0.058 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.135 numCandidates=0.135 parsedNumCandidates=1 numTokens=36.192 parseTime=52.115 maxCellSize=1 fallOffBeam=0 totalDerivs=2510.615 numOfFeaturizedDerivs=2510.615
          }
          iter=0.train: example 52/72: data/taxes.examples:13 {
            Example: If Schedule EIC ( Form 1040 ) is present in the return, Form 1040, Line 66a 'EarnedIncomeCreditAmt' must have a non-zero value. {
              Tokens: [if, schedule, eic, (, form, 1040, ), is, present, in, the, return, ,, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', must, have, a, non, zero, value, .]
              Lemmatized tokens: [if, schedule, eic, (, form, 1040, ), i, present, in, the, return, ,, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', must, have, a, non, zero, value, .]
              POS tags: [NNP, NNP, NNP, UNK, NNP, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, CD, UNK, UNK]
              NER tags: [UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK]
              targetValue: (string "has_value ( scheduleEIC ) & ~non_zero ( earnedIncomeCreditAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 1 candidates {
              True@0000: (derivation (formula (call + (call + (string "has_value(schedule") (string eic) (string ")")) (string " & ~") (call + (string "non_zero(") (string earnedincomecreditamt) (string ")")))) (value (string "has_value(scheduleeic) & ~non_zero(earnedincomecreditamt)")) (type fb:type.any)) [score=0, prob=1, comp=1]
              Pred@0000: (derivation (formula (call + (call + (string "has_value(schedule") (string eic) (string ")")) (string " & ~") (call + (string "non_zero(") (string earnedincomecreditamt) (string ")")))) (value (string "has_value(scheduleeic) & ~non_zero(earnedincomecreditamt)")) (type fb:type.any)) [score=0, prob=1, comp=1]
            }
            Current: correct=1 oracle=1 partCorrect=1 partOracle=1 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=1 numCandidates=1 parsedNumCandidates=1 numTokens=28 parseTime=5 maxCellSize=1 fallOffBeam=0 totalDerivs=1026 numOfFeaturizedDerivs=1026
            Cumulative(iter=0.train): correct=0.075 oracle=0.075 partCorrect=0.075 partOracle=0.075 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.151 numCandidates=0.151 parsedNumCandidates=1 numTokens=36.038 parseTime=51.226 maxCellSize=1 fallOffBeam=0 totalDerivs=2482.604 numOfFeaturizedDerivs=2482.604
          }
          iter=0.train: example 53/72: data/taxes.examples:67 {
            Example: If ['StateAbbreviationCd' of the Filer's address in the Return Header is equal to AS, GU, MP, PR or VI] or [the Filer's address in the Return Header is a foreign address], then Form 1040, Line 66a 'EarnedIncomeCreditAmt' must be equal to zero or not be present. {
              Tokens: [if, [, ', stateabbreviationcd, ', of, the, filer, ', s, address, in, the, return, header, is, equal, to, as, ,, gu, ,, mp, ,, pr, or, vi, ], or, [, the, filer, ', s, address, in, the, return, header, is, a, foreign, address, ], ,, then, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', must, be, equal, to, zero, or, not, be, present, .]
              Lemmatized tokens: [if, [, ', stateabbreviationcd, ', of, the, filer, ', s, addres, in, the, return, header, i, equal, to, as, ,, gu, ,, mp, ,, pr, or, vi, ], or, [, the, filer, ', s, addres, in, the, return, header, i, a, foreign, addres, ], ,, then, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', must, be, equal, to, zero, or, not, be, present, .]
              POS tags: [NNP, UNK, '', NNP, '', UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, NNP, UNK, UNK, UNK, NNP, UNK, NNP, UNK, NNP, UNK, NNP, UNK, NNP, UNK, UNK, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, NNP, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "value( stateAbbrevationCd,X ) & ( same( X,as ) | same( X,gu ) | same( X,mp ) |  same( X,pr ) |  same( X,vi ) | same( X,foreign ) )  & non_zero( earnedIncomeCreditAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=64 parseTime=13 maxCellSize=1 fallOffBeam=0 totalDerivs=4453 numOfFeaturizedDerivs=4453
            Cumulative(iter=0.train): correct=0.074 oracle=0.074 partCorrect=0.074 partOracle=0.074 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.148 numCandidates=0.148 parsedNumCandidates=1 numTokens=36.556 parseTime=50.519 maxCellSize=1 fallOffBeam=0 totalDerivs=2519.093 numOfFeaturizedDerivs=2519.093
          }
          iter=0.train: example 54/72: data/taxes.examples:66 {
            Example: Form 1040, Line 66a 'EarnedIncomeCreditAmt' must have a zero value if an amount is entered. e-File database indicates the taxpayer is not allowed to claim Earned Income Credit for the tax year. {
              Tokens: [form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', must, have, a, zero, value, if, an, amount, is, entered, ., e, file, database, indicates, the, taxpayer, is, not, allowed, to, claim, earned, income, credit, for, the, tax, year, .]
              Lemmatized tokens: [form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', must, have, a, zero, value, if, an, amount, i, entered, ., e, file, database, indicate, the, taxpayer, i, not, allowed, to, claim, earned, income, credit, for, the, tax, year, .]
              POS tags: [NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, NNP, NNP, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "non_zero( earnedIncomeCreditAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=38 parseTime=11 maxCellSize=1 fallOffBeam=0 totalDerivs=1666 numOfFeaturizedDerivs=1666
            Cumulative(iter=0.train): correct=0.073 oracle=0.073 partCorrect=0.073 partOracle=0.073 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.145 numCandidates=0.145 parsedNumCandidates=1 numTokens=36.582 parseTime=49.800 maxCellSize=1 fallOffBeam=0 totalDerivs=2503.582 numOfFeaturizedDerivs=2503.582
          }
          iter=0.train: example 55/72: data/taxes.examples:70 {
            Example: If Form 1040, Line 2 checkbox Married {
              Tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              Lemmatized tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 2, UNK, UNK]
              targetValue: (string "value( individualReturnFilingStatusCd,2 ) & has_value( primaryDeathDt ) & has_value( spouseDeathDt ) & ~has_value( personalRepresentativeInd )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=8 parseTime=1 maxCellSize=1 fallOffBeam=0 totalDerivs=99 numOfFeaturizedDerivs=99
            Cumulative(iter=0.train): correct=0.071 oracle=0.071 partCorrect=0.071 partOracle=0.071 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.143 numCandidates=0.143 parsedNumCandidates=1 numTokens=36.071 parseTime=48.929 maxCellSize=1 fallOffBeam=0 totalDerivs=2460.643 numOfFeaturizedDerivs=2460.643
          }
          iter=0.train: example 56/72: data/taxes.examples:3 {
            Example: If Form 1040, Line 4 checkbox Head {
              Tokens: [if, form, 1040, ,, line, 4, checkbox, head]
              Lemmatized tokens: [if, form, 1040, ,, line, 4, checkbox, head]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 4, UNK, UNK]
              targetValue: (string "value( individualReturnFilingStatusCd,4 ) & has_value ( qualifyingHOHNm )  & ~has_value( qulifyingHOHSSN )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=8 parseTime=1 maxCellSize=1 fallOffBeam=0 totalDerivs=99 numOfFeaturizedDerivs=99
            Cumulative(iter=0.train): correct=0.070 oracle=0.070 partCorrect=0.070 partOracle=0.070 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.140 numCandidates=0.140 parsedNumCandidates=1 numTokens=35.579 parseTime=48.088 maxCellSize=1 fallOffBeam=0 totalDerivs=2419.211 numOfFeaturizedDerivs=2419.211
          }
          iter=0.train: example 57/72: data/taxes.examples:0 {
            Example: If Form 1040, Line 75 'OverpaidAmt' has a non-zero value and Line 79 'EsPenaltyAmt' is greater than Line 75 'OverpaidAmt', then Line 78 'OwedAmt' must have a non-zero value. {
              Tokens: [if, form, 1040, ,, line, 75, `, overpaidamt, ', has, a, non, zero, value, and, line, 79, `, espenaltyamt, ', is, greater, than, line, 75, `, overpaidamt, ', ,, then, line, 78, `, owedamt, ', must, have, a, non, zero, value, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 75, `, overpaidamt, ', ha, a, non, zero, value, and, line, 79, `, espenaltyamt, ', i, greater, than, line, 75, `, overpaidamt, ', ,, then, line, 78, `, owedamt, ', must, have, a, non, zero, value, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, CD, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 75, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, 79, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 75, UNK, UNK, UNK, UNK, UNK, UNK, 78, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK]
              targetValue: (string "non_zero( overpaidAmt ) & greater_than( esPenaltyAmt,overpaidAmt ) & ~non_zero( owedAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 1 candidates {
              True@0000: (derivation (formula (call + (call + (call + (string "non_zero(") (string overpaidamt) (string ")")) (string " & ") (call + (string "greater_than(") (string espenaltyamt) (string ,) (string overpaidamt) (string ")"))) (string " & ~") (call + (string "non_zero(") (string owedamt) (string ")")))) (value (string "non_zero(overpaidamt) & greater_than(espenaltyamt,overpaidamt) & ~non_zero(owedamt)")) (type fb:type.any)) [score=0, prob=1, comp=1]
              Pred@0000: (derivation (formula (call + (call + (call + (string "non_zero(") (string overpaidamt) (string ")")) (string " & ") (call + (string "greater_than(") (string espenaltyamt) (string ,) (string overpaidamt) (string ")"))) (string " & ~") (call + (string "non_zero(") (string owedamt) (string ")")))) (value (string "non_zero(overpaidamt) & greater_than(espenaltyamt,overpaidamt) & ~non_zero(owedamt)")) (type fb:type.any)) [score=0, prob=1, comp=1]
            }
            Current: correct=1 oracle=1 partCorrect=1 partOracle=1 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=1 numCandidates=1 parsedNumCandidates=1 numTokens=42 parseTime=26 maxCellSize=1 fallOffBeam=0 totalDerivs=2205 numOfFeaturizedDerivs=2205
            Cumulative(iter=0.train): correct=0.086 oracle=0.086 partCorrect=0.086 partOracle=0.086 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.155 numCandidates=0.155 parsedNumCandidates=1 numTokens=35.690 parseTime=47.707 maxCellSize=1 fallOffBeam=0 totalDerivs=2415.517 numOfFeaturizedDerivs=2415.517
          }
          iter=0.train: example 58/72: data/taxes.examples:58 {
            Example: For each dependent that has a value on Form 1040, Line 6c( 1 ), if Line 6c( 4 ) checkbox 'EligibleForChildTaxCreditInd' is checked, then the corresponding line 6c( 3 ) 'DependentRelationshipCd' must have one of the following values: STEPCHILD or HALF {
              Tokens: [for, each, dependent, that, has, a, value, on, form, 1040, ,, line, 6c(, 1, ), ,, if, line, 6c(, 4, ), checkbox, `, eligibleforchildtaxcreditind, ', is, checked, ,, then, the, corresponding, line, 6c(, 3, ), `, dependentrelationshipcd, ', must, have, one, of, the, following, values:, stepchild, or, half]
              Lemmatized tokens: [for, each, dependent, that, ha, a, value, on, form, 1040, ,, line, 6c(, 1, ), ,, if, line, 6c(, 4, ), checkbox, `, eligibleforchildtaxcreditind, ', i, checked, ,, then, the, corresponding, line, 6c(, 3, ), `, dependentrelationshipcd, ', must, have, one, of, the, following, values:, stepchild, or, half]
              POS tags: [NNP, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, UNK, CD, UNK, UNK, UNK, NNP, UNK, CD, UNK, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, CD, UNK, UNK, NNP, '', UNK, UNK, CD, UNK, UNK, UNK, UNK, NNP, UNK, NNP]
              NER tags: [UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, 4, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 3, UNK, UNK, UNK, UNK, UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "has_value( eligibleForChildTaxCreditInd( I ) ) & ~( same( dependentRelationshipCd( I ),stepChild ) | same( dependentRelationshipCd( I ),halfBrother ) | same( dependentRelationshipCd( I ),halfSister ) | same( dependentRelationshipCd( I ),stepBrother ) | same( dependentRelationshipCd( I ),stepSister ) | same( dependentRelationshipCd( I ),fosterChild ) | same( dependentRelationshipCd( I ),grandChild ) | same( dependentRelationshipCd( I ),brother ) |same( dependentRelationshipCd( I ),sister ) | same( dependentRelationshipCd( I ),nephew ) | same( dependentRelationshipCd( I ),niece ) | same( dependentRelationshipCd( I ),son ) | same( dependentRelationshipCd( I ),daughter )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=48 parseTime=11 maxCellSize=1 fallOffBeam=0 totalDerivs=2530 numOfFeaturizedDerivs=2530
            Cumulative(iter=0.train): correct=0.085 oracle=0.085 partCorrect=0.085 partOracle=0.085 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.153 numCandidates=0.153 parsedNumCandidates=1 numTokens=35.898 parseTime=47.085 maxCellSize=1 fallOffBeam=0 totalDerivs=2417.458 numOfFeaturizedDerivs=2417.458
          }
          iter=0.train: example 59/72: data/taxes.examples:4 {
            Example: If Form 1040, Line 4 'QualifyingHOHSSN' has a value, then it cannot be equal to the Primary SSN or the Spouse SSN in the Return Header. {
              Tokens: [if, form, 1040, ,, line, 4, `, qualifyinghohssn, ', has, a, value, ,, then, it, cannot, be, equal, to, the, primary, ssn, or, the, spouse, ssn, in, the, return, header, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 4, `, qualifyinghohssn, ', ha, a, value, ,, then, it, cannot, be, equal, to, the, primary, ssn, or, the, spouse, ssn, in, the, return, header, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, NNP, UNK, UNK, NNP, NNP, UNK, UNK, NNP, NNP, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 4, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "has_value( qualifyingHOHSSN ) & ( same( qualifyingHOHSSN,primarySSN ) | same( qualifyingHOHSSN,spouseSSN ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=31 parseTime=5 maxCellSize=1 fallOffBeam=0 totalDerivs=1149 numOfFeaturizedDerivs=1149
            Cumulative(iter=0.train): correct=0.083 oracle=0.083 partCorrect=0.083 partOracle=0.083 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.150 numCandidates=0.150 parsedNumCandidates=1 numTokens=35.817 parseTime=46.383 maxCellSize=1 fallOffBeam=0 totalDerivs=2396.317 numOfFeaturizedDerivs=2396.317
          }
          iter=0.train: example 60/72: data/taxes.examples:47 {
            Example: If Form 1040, Line 2 checkbox Married {
              Tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              Lemmatized tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 2, UNK, UNK]
              targetValue: (string "value( individualReturnFilingStatusCd,2 ) & ~has_value( spousePINEnteredByCd )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=8 parseTime=1 maxCellSize=1 fallOffBeam=0 totalDerivs=99 numOfFeaturizedDerivs=99
            Cumulative(iter=0.train): correct=0.082 oracle=0.082 partCorrect=0.082 partOracle=0.082 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.148 numCandidates=0.148 parsedNumCandidates=1 numTokens=35.361 parseTime=45.639 maxCellSize=1 fallOffBeam=0 totalDerivs=2358.656 numOfFeaturizedDerivs=2358.656
          }
          iter=0.train: example 61/72: data/taxes.examples:29 {
            Example: If 'PrimarySSN' in the Return Header is an ITIN, then Schedule EIC ( Form 1040A or 1040 ) must not be present in the return. {
              Tokens: [if, `, primaryssn, ', in, the, return, header, is, an, itin, ,, then, schedule, eic, (, form, 1040a, or, 1040, ), must, not, be, present, in, the, return, .]
              Lemmatized tokens: [if, `, primaryssn, ', in, the, return, header, i, an, itin, ,, then, schedule, eic, (, form, 1040a, or, 1040, ), must, not, be, present, in, the, return, .]
              POS tags: [NNP, UNK, NNP, '', UNK, UNK, NNP, NNP, UNK, UNK, NNP, UNK, UNK, NNP, NNP, UNK, NNP, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "iTIN( primarySSN ) & has_value( formScheduleEIC )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=29 parseTime=3 maxCellSize=1 fallOffBeam=0 totalDerivs=977 numOfFeaturizedDerivs=977
            Cumulative(iter=0.train): correct=0.081 oracle=0.081 partCorrect=0.081 partOracle=0.081 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.145 numCandidates=0.145 parsedNumCandidates=1 numTokens=35.258 parseTime=44.952 maxCellSize=1 fallOffBeam=0 totalDerivs=2336.371 numOfFeaturizedDerivs=2336.371
          }
          iter=0.train: example 62/72: data/taxes.examples:36 {
            Example: If Form 1040, Line 74 'TotalPaymentsAmt' is greater than Line 63 'TotalTaxAmt' and [ Line 77 'AppliedToEsTaxAmt' plus( + ) Line 79 'EsPenaltyAmt' is equal to Line 75 'OverpaidAmt' ], then Line 76a 'RefundAmt' must be equal to zero if an amount is entered. {
              Tokens: [if, form, 1040, ,, line, 74, `, totalpaymentsamt, ', is, greater, than, line, 63, `, totaltaxamt, ', and, [, line, 77, `, appliedtoestaxamt, ', plus(, +, ), line, 79, `, espenaltyamt, ', is, equal, to, line, 75, `, overpaidamt, ', ], ,, then, line, 76a, `, refundamt, ', must, be, equal, to, zero, if, an, amount, is, entered, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 74, `, totalpaymentsamt, ', i, greater, than, line, 63, `, totaltaxamt, ', and, [, line, 77, `, appliedtoestaxamt, ', plus(, +, ), line, 79, `, espenaltyamt, ', i, equal, to, line, 75, `, overpaidamt, ', ], ,, then, line, 76a, `, refundamt, ', must, be, equal, to, zero, if, an, amount, i, entered, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 74, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 63, UNK, UNK, UNK, UNK, UNK, UNK, 77, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 79, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 75, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "greater_than( totalPaymentsAmt,totalTaxAmt ) & plus( appliedToEsTaxAmt,esPaneltyAmt,overpaidAmt ) &  has_value( refundAmt ) & non_zero( refundAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=59 parseTime=48 maxCellSize=1 fallOffBeam=0 totalDerivs=4088 numOfFeaturizedDerivs=4088
            Cumulative(iter=0.train): correct=0.079 oracle=0.079 partCorrect=0.079 partOracle=0.079 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.143 numCandidates=0.143 parsedNumCandidates=1 numTokens=35.635 parseTime=45 maxCellSize=1 fallOffBeam=0 totalDerivs=2364.175 numOfFeaturizedDerivs=2364.175
          }
          iter=0.train: example 63/72: data/taxes.examples:44 {
            Example: If Form 1040, Line 54c checkbox 'SpecificOtherCreditsInd' is checked and 'creditFormsStatementSchRCd' has the value SCH {
              Tokens: [if, form, 1040, ,, line, 54c, checkbox, `, specificothercreditsind, ', is, checked, and, `, creditformsstatementschrcd, ', has, the, value, sch]
              Lemmatized tokens: [if, form, 1040, ,, line, 54c, checkbox, `, specificothercreditsind, ', i, checked, and, `, creditformsstatementschrcd, ', ha, the, value, sch]
              POS tags: [NNP, NNP, CD, UNK, NNP, UNK, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, '', UNK, UNK, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "has_value( specificOtherCreditsInd ) &  value( creditFormsStatementSchRCd,sch_R ) & ~has_value( primary65OrOlderInd ) & ~has_value( spouse65OrOlderInd ) &\n                             ~has_value( und65RtdPermnntTotDsbltyInd ) & ~has_value( bothUnder65OneRtdDsbltyInd ) & ~has_value( bothUnder65BothRtdDsbltyInd ) & ~has_value( under65DidNotLiveTogetherInd )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=20 parseTime=2 maxCellSize=1 fallOffBeam=0 totalDerivs=620 numOfFeaturizedDerivs=620
            Cumulative(iter=0.train): correct=0.078 oracle=0.078 partCorrect=0.078 partOracle=0.078 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.141 numCandidates=0.141 parsedNumCandidates=1 numTokens=35.391 parseTime=44.328 maxCellSize=1 fallOffBeam=0 totalDerivs=2336.922 numOfFeaturizedDerivs=2336.922
          }
          iter=0.train: example 64/72: data/taxes.examples:9 {
            Example: Each 'DependentSSN' that has a value on Form 1040, Line 6c( 2 ) must be within the valid range of SSN/ITIN/ATIN. {
              Tokens: [each, `, dependentssn, ', that, has, a, value, on, form, 1040, ,, line, 6c(, 2, ), must, be, within, the, valid, range, of, ssn/itin/atin, .]
              Lemmatized tokens: [each, `, dependentssn, ', that, ha, a, value, on, form, 1040, ,, line, 6c(, 2, ), must, be, within, the, valid, range, of, ssn/itin/atin, .]
              POS tags: [NNP, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, UNK]
              NER tags: [UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, 2, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "has_value( depSSN( I ) ) & ~validSSN( depSSN( I ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=25 parseTime=1 maxCellSize=1 fallOffBeam=0 totalDerivs=728 numOfFeaturizedDerivs=728
            Cumulative(iter=0.train): correct=0.077 oracle=0.077 partCorrect=0.077 partOracle=0.077 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.138 numCandidates=0.138 parsedNumCandidates=1 numTokens=35.231 parseTime=43.662 maxCellSize=1 fallOffBeam=0 totalDerivs=2312.169 numOfFeaturizedDerivs=2312.169
          }
          iter=0.train: example 65/72: data/taxes.examples:71 {
            Example: If Form 1040, Line 2 checkbox Married {
              Tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              Lemmatized tokens: [if, form, 1040, ,, line, 2, checkbox, married]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 2, UNK, UNK]
              targetValue: (string "~value( individualReturnFilingStatusCd,2 ) & has_value( primaryDeathDt ) & ~value( nameLine1Txt,decd ) & ~value( nameLine1Text,leftAngleDecd )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=8 parseTime=0 maxCellSize=1 fallOffBeam=0 totalDerivs=99 numOfFeaturizedDerivs=99
            Cumulative(iter=0.train): correct=0.076 oracle=0.076 partCorrect=0.076 partOracle=0.076 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.136 numCandidates=0.136 parsedNumCandidates=1 numTokens=34.818 parseTime=43 maxCellSize=1 fallOffBeam=0 totalDerivs=2278.636 numOfFeaturizedDerivs=2278.636
          }
          iter=0.train: example 66/72: data/taxes.examples:40 {
            Example: If Form 1040, Line 13 checkbox 'CapitalDistributionInd' is checked, then Line 13 'CapitalGainLossAmt' must have a non-zero value. {
              Tokens: [if, form, 1040, ,, line, 13, checkbox, `, capitaldistributionind, ', is, checked, ,, then, line, 13, `, capitalgainlossamt, ', must, have, a, non, zero, value, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 13, checkbox, `, capitaldistributionind, ', i, checked, ,, then, line, 13, `, capitalgainlossamt, ', must, have, a, non, zero, value, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, CD, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 13, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 13, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK]
              targetValue: (string "has_value( capitalDistributionInd ) & ~non_zero( capitalGainLossAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 1 candidates {
              True@0000: (derivation (formula (call + (call + (string "has_value(") (string capitaldistributionind) (string ")")) (string " & ~") (call + (string "non_zero(") (string capitalgainlossamt) (string ")")))) (value (string "has_value(capitaldistributionind) & ~non_zero(capitalgainlossamt)")) (type fb:type.any)) [score=0, prob=1, comp=1]
              Pred@0000: (derivation (formula (call + (call + (string "has_value(") (string capitaldistributionind) (string ")")) (string " & ~") (call + (string "non_zero(") (string capitalgainlossamt) (string ")")))) (value (string "has_value(capitaldistributionind) & ~non_zero(capitalgainlossamt)")) (type fb:type.any)) [score=0, prob=1, comp=1]
            }
            Current: correct=1 oracle=1 partCorrect=1 partOracle=1 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=1 numCandidates=1 parsedNumCandidates=1 numTokens=26 parseTime=5 maxCellSize=1 fallOffBeam=0 totalDerivs=963 numOfFeaturizedDerivs=963
            Cumulative(iter=0.train): correct=0.090 oracle=0.090 partCorrect=0.090 partOracle=0.090 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.149 numCandidates=0.149 parsedNumCandidates=1 numTokens=34.687 parseTime=42.433 maxCellSize=1 fallOffBeam=0 totalDerivs=2259 numOfFeaturizedDerivs=2259
          }
          iter=0.train: example 67/72: data/taxes.examples:5 {
            Example: If Form 1040, Line 4 'QualifyingHOHSSN' has a value, then it must be within the valid range of SSN/ITIN/ATIN. {
              Tokens: [if, form, 1040, ,, line, 4, `, qualifyinghohssn, ', has, a, value, ,, then, it, must, be, within, the, valid, range, of, ssn/itin/atin, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 4, `, qualifyinghohssn, ', ha, a, value, ,, then, it, must, be, within, the, valid, range, of, ssn/itin/atin, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, 4, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "has_value( qualifyingHOHSSN ) & ~validSSN( qualifyingHOHSSN )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=24 parseTime=3 maxCellSize=1 fallOffBeam=0 totalDerivs=743 numOfFeaturizedDerivs=743
            Cumulative(iter=0.train): correct=0.088 oracle=0.088 partCorrect=0.088 partOracle=0.088 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.147 numCandidates=0.147 parsedNumCandidates=1 numTokens=34.529 parseTime=41.853 maxCellSize=1 fallOffBeam=0 totalDerivs=2236.706 numOfFeaturizedDerivs=2236.706
          }
          iter=0.train: example 68/72: data/taxes.examples:54 {
            Example: If Form 1040, Line 66a 'EarnedIncomeCreditAmt' has a non-zero value and Schedule EIC ( Form 1040 ) is not present in the return, then the Primary Taxpayer and/or the Spouse Taxpayer in the Return Header must be at least 25 years old but not be older than 64. {
              Tokens: [if, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', has, a, non, zero, value, and, schedule, eic, (, form, 1040, ), is, not, present, in, the, return, ,, then, the, primary, taxpayer, and/or, the, spouse, taxpayer, in, the, return, header, must, be, at, least, 25, years, old, but, not, be, older, than, 64, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', ha, a, non, zero, value, and, schedule, eic, (, form, 1040, ), i, not, present, in, the, return, ,, then, the, primary, taxpayer, and/or, the, spouse, taxpayer, in, the, return, header, must, be, at, least, 25, year, old, but, not, be, older, than, 64, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, NNP, NNP, UNK, NNP, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, NNP, UNK, UNK, NNP, NNP, UNK, UNK, NNP, NNP, UNK, UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, CD, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 25, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 64, UNK]
              targetValue: (string "non_zero( earnedIncomeCreditAmt ) & ~has_value( scheduleEIC ) & ~( ( age( primarySSN,X ) & greater_than( X,25 ) & greater_than( 65,X ) ) | ( age( spouseSSN,Y ) & greater_than( Y,25 ) & greater_than( 65,Y ) ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=54 parseTime=29 maxCellSize=1 fallOffBeam=0 totalDerivs=3197 numOfFeaturizedDerivs=3197
            Cumulative(iter=0.train): correct=0.087 oracle=0.087 partCorrect=0.087 partOracle=0.087 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.145 numCandidates=0.145 parsedNumCandidates=1 numTokens=34.812 parseTime=41.667 maxCellSize=1 fallOffBeam=0 totalDerivs=2250.623 numOfFeaturizedDerivs=2250.623
          }
          iter=0.train: example 69/72: data/taxes.examples:14 {
            Example: If Form 1040, Line 66a 'EarnedIncomeCreditAmt' has a non-zero value, then at least one of the following must be true: ( 1 ) In [WagesNotShownSchedule] attached to Form 1040, Line 7, at least one 'WagesLiteralCd' must have the value HSH and the corresponding 'WagesNotShownAmt' must be greater than zero; ( 2 ) [OtherIncomeTypeStatement] must be attached to Form 1040, Line 21; ( 3 ) Form W-2 must be present; ( 4 ) Form 1099-R must be present; ( 5 ) Schedule C ( Form 1040 ) must be present; ( 6 ) Schedule E ( Form 1040 ), Line 28( b ) 'PartnershipSCorpCd' must have the value P for at least one entry in Line 28; ( 7 ) Schedule F ( Form 1040 ) must be present; ( 8 ) Schedule C-EZ ( Form 1040 ) must be present; ( 9 ) Form 8919 must be present; ( 10 ) In [WagesNotShownSchedule] attached to Form 1040, Line 7, at least one 'WagesLiteralCd' must have the value FEC with the corresponding 'WagesNotShownAmt' having a value greater than zero and [FECRecord] must be present. {
              Tokens: [if, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', has, a, non, zero, value, ,, then, at, least, one, of, the, following, must, be, true:, (, 1, ), in, [, wagesnotshownschedule, ], attached, to, form, 1040, ,, line, 7, ,, at, least, one, `, wagesliteralcd, ', must, have, the, value, hsh, and, the, corresponding, `, wagesnotshownamt, ', must, be, greater, than, zero;, (, 2, ), [, otherincometypestatement, ], must, be, attached, to, form, 1040, ,, line, 21;, (, 3, ), form, w-2, must, be, present;, (, 4, ), form, 1099, r, must, be, present;, (, 5, ), schedule, c, (, form, 1040, ), must, be, present;, (, 6, ), schedule, e, (, form, 1040, ), ,, line, 28(, b, ), `, partnershipscorpcd, ', must, have, the, value, p, for, at, least, one, entry, in, line, 28;, (, 7, ), schedule, f, (, form, 1040, ), must, be, present;, (, 8, ), schedule, c, ez, (, form, 1040, ), must, be, present;, (, 9, ), form, 8919, must, be, present;, (, 10, ), in, [, wagesnotshownschedule, ], attached, to, form, 1040, ,, line, 7, ,, at, least, one, `, wagesliteralcd, ', must, have, the, value, fec, with, the, corresponding, `, wagesnotshownamt, ', having, a, value, greater, than, zero, and, [, fecrecord, ], must, be, present, .]
              Lemmatized tokens: [if, form, 1040, ,, line, 66a, `, earnedincomecreditamt, ', ha, a, non, zero, value, ,, then, at, least, one, of, the, following, must, be, true:, (, 1, ), in, [, wagesnotshownschedule, ], attached, to, form, 1040, ,, line, 7, ,, at, least, one, `, wagesliteralcd, ', must, have, the, value, hsh, and, the, corresponding, `, wagesnotshownamt, ', must, be, greater, than, zero;, (, 2, ), [, otherincometypestatement, ], must, be, attached, to, form, 1040, ,, line, 21;, (, 3, ), form, w-2, must, be, present;, (, 4, ), form, 1099, r, must, be, present;, (, 5, ), schedule, c, (, form, 1040, ), must, be, present;, (, 6, ), schedule, e, (, form, 1040, ), ,, line, 28(, b, ), `, partnershipscorpcd, ', must, have, the, value, p, for, at, least, one, entry, in, line, 28;, (, 7, ), schedule, f, (, form, 1040, ), must, be, present;, (, 8, ), schedule, c, ez, (, form, 1040, ), must, be, present;, (, 9, ), form, 8919, must, be, present;, (, 10, ), in, [, wagesnotshownschedule, ], attached, to, form, 1040, ,, line, 7, ,, at, least, one, `, wagesliteralcd, ', must, have, the, value, fec, with, the, corresponding, `, wagesnotshownamt, ', having, a, value, greater, than, zero, and, [, fecrecord, ], must, be, present, .]
              POS tags: [NNP, NNP, CD, UNK, NNP, UNK, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, CD, UNK, NNP, UNK, NNP, UNK, UNK, UNK, NNP, CD, UNK, NNP, CD, UNK, UNK, UNK, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, UNK, UNK, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, UNK, CD, UNK, UNK, NNP, UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, UNK, UNK, CD, UNK, NNP, NNP, UNK, UNK, UNK, UNK, CD, UNK, NNP, CD, NNP, UNK, UNK, UNK, UNK, CD, UNK, NNP, NNP, UNK, NNP, CD, UNK, UNK, UNK, UNK, UNK, CD, UNK, NNP, NNP, UNK, NNP, CD, UNK, UNK, NNP, UNK, UNK, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, UNK, UNK, UNK, CD, UNK, UNK, NNP, UNK, UNK, CD, UNK, NNP, NNP, UNK, NNP, CD, UNK, UNK, UNK, UNK, UNK, CD, UNK, NNP, NNP, NNP, UNK, NNP, CD, UNK, UNK, UNK, UNK, UNK, CD, UNK, NNP, CD, UNK, UNK, UNK, UNK, CD, UNK, NNP, UNK, NNP, UNK, UNK, UNK, NNP, CD, UNK, NNP, CD, UNK, UNK, UNK, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, UNK, UNK, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, UNK, CD, UNK, UNK, NNP, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, 7, UNK, UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 2, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, 3, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 4, UNK, UNK, 1099, UNK, UNK, UNK, UNK, UNK, 5, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, 6, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, 7, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, 8, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, 9, UNK, UNK, 8919, UNK, UNK, UNK, UNK, 10, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, 7, UNK, UNK, UNK, 1, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "non_zero( earnedIncomeCreditAmt )              & ~ (  (  value ( wagesLiteralCd( I ), hsh ) & greater_than ( wagesNotShownAmt( I ),0 ) )|\n                                                                                   has_value( otherIncomeTypeStatement ) |\n                                                                                   has_value( w2 ) |\n                                                                                   has_value( form1099R ) |\n                                                                                   has_value( scheduleC ) |\n                                                                                   has_value( form8919 )  |\n                                                                                  ( value ( wagesLiteralCd( J ),fec ) &  greater_than( wagesNotShownAmt( J ),0 ) &\n                                                                                     has_value( fECRecord ) ) )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            } [1.2s, cum. 1.2s]
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=215 parseTime=1285 maxCellSize=1 fallOffBeam=0 totalDerivs=47224 numOfFeaturizedDerivs=47224
            Cumulative(iter=0.train): correct=0.086 oracle=0.086 partCorrect=0.086 partOracle=0.086 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.143 numCandidates=0.143 parsedNumCandidates=1 numTokens=37.386 parseTime=59.429 maxCellSize=1 fallOffBeam=0 totalDerivs=2893.100 numOfFeaturizedDerivs=2893.100
          } [1.2s, cum. 4.2s]
          iter=0.train: example 70/72: data/taxes.examples:17 {
            Example: If Schedule A ( Form 1040 ) is present in the return, then Form 1040, Line 40 'TotalItemizedOrStandardDedAmt' must be equal to Schedule A ( Form 1040 ), Line 29 'TotalItemizedDeductionsAmt'. {
              Tokens: [if, schedule, a, (, form, 1040, ), is, present, in, the, return, ,, then, form, 1040, ,, line, 40, `, totalitemizedorstandarddedamt, ', must, be, equal, to, schedule, a, (, form, 1040, ), ,, line, 29, `, totalitemizeddeductionsamt, ', .]
              Lemmatized tokens: [if, schedule, a, (, form, 1040, ), i, present, in, the, return, ,, then, form, 1040, ,, line, 40, `, totalitemizedorstandarddedamt, ', must, be, equal, to, schedule, a, (, form, 1040, ), ,, line, 29, `, totalitemizeddeductionsamt, ', .]
              POS tags: [NNP, NNP, NNP, UNK, NNP, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, NNP, UNK, NNP, CD, UNK, UNK, NNP, CD, UNK, NNP, '', UNK]
              NER tags: [UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, 40, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, 29, UNK, UNK, UNK, UNK]
              targetValue: (string "has_value( scheduleA ) & ~same( totalItemizedOrStandardDedAmt,totalItemizedDeductionsAmt )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=39 parseTime=8 maxCellSize=1 fallOffBeam=0 totalDerivs=1859 numOfFeaturizedDerivs=1859
            Cumulative(iter=0.train): correct=0.085 oracle=0.085 partCorrect=0.085 partOracle=0.085 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.141 numCandidates=0.141 parsedNumCandidates=1 numTokens=37.408 parseTime=58.704 maxCellSize=1 fallOffBeam=0 totalDerivs=2878.535 numOfFeaturizedDerivs=2878.535
          }
          iter=0.train: example 71/72: data/taxes.examples:55 {
            Example: If Schedule A ( Form 1040 ) is not present in the return and Form 1040, Line 39b checkbox 'MustItemizeInd' is checked, then Form 1040, Line 40 'TotalItemizedOrStandardDedAmt' must have a zero value if an amount is entered. {
              Tokens: [if, schedule, a, (, form, 1040, ), is, not, present, in, the, return, and, form, 1040, ,, line, 39b, checkbox, `, mustitemizeind, ', is, checked, ,, then, form, 1040, ,, line, 40, `, totalitemizedorstandarddedamt, ', must, have, a, zero, value, if, an, amount, is, entered, .]
              Lemmatized tokens: [if, schedule, a, (, form, 1040, ), i, not, present, in, the, return, and, form, 1040, ,, line, 39b, checkbox, `, mustitemizeind, ', i, checked, ,, then, form, 1040, ,, line, 40, `, totalitemizedorstandarddedamt, ', must, have, a, zero, value, if, an, amount, i, entered, .]
              POS tags: [NNP, NNP, NNP, UNK, NNP, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, UNK, UNK, UNK, NNP, '', UNK, UNK, UNK, UNK, NNP, CD, UNK, NNP, CD, UNK, NNP, '', UNK, UNK, UNK, CD, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER tags: [UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, NUMBER, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              NER values: [UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, UNK, 1040, UNK, UNK, 40, UNK, UNK, UNK, UNK, UNK, UNK, 0, UNK, UNK, UNK, UNK, UNK, UNK, UNK]
              targetValue: (string "~has_value( scheduleA ) & has_value( mustItemizeInd ) & non_zero( totalItemizedOrStandardDedAmt,X )")
              Dependency children: []
            }
            Parser.parse: parse {
              Parser.ensureExecuted 
            }
            Parser.setEvaluation: 0 candidates 
            Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=0 numCandidates=0 numTokens=46 parseTime=11 maxCellSize=1 fallOffBeam=0 totalDerivs=2499 numOfFeaturizedDerivs=2499
            Cumulative(iter=0.train): correct=0.083 oracle=0.083 partCorrect=0.083 partOracle=0.083 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.139 numCandidates=0.139 parsedNumCandidates=1 numTokens=37.528 parseTime=58.042 maxCellSize=1 fallOffBeam=0 totalDerivs=2873.264 numOfFeaturizedDerivs=2873.264
          }
        } [4.2s, cum. 4.2s]
        Stats for iter=0.train: correct=0.083 oracle=0.083 partCorrect=0.083 partOracle=0.083 correctIndexAfterParse=0 correctMaxBeamPosition=0 correctMaxUnsortedBeamPosition=0 parsed=0.139 numCandidates=0.139 parsedNumCandidates=1 numTokens=37.528 parseTime=58.042 maxCellSize=1 fallOffBeam=0 totalDerivs=2873.264 numOfFeaturizedDerivs=2873.264
        Evaluation stats for iter=0.train {
          correct = 0/ << 0.083 ~ 0.276 >> /1 (72)
          oracle = 0/ << 0.083 ~ 0.276 >> /1 (72)
          partCorrect = 0/ << 0.083 ~ 0.276 >> /1 (72)
          partOracle = 0/ << 0.083 ~ 0.276 >> /1 (72)
          correctIndexAfterParse = 0/ << 0 ~ 0 >> /0 (6)
          correctMaxBeamPosition = 0/ << 0 ~ 0 >> /0 (6)
          correctMaxUnsortedBeamPosition = 0/ << 0 ~ 0 >> /0 (6)
          parsed = 0/ << 0.139 ~ 0.346 >> /1 (72)
          numCandidates = 0/ << 0.139 ~ 0.346 >> /1 (72)
          parsedNumCandidates = 1/ << 1 ~ 0 >> /1 (10)
          numTokens = 7/ << 37.528 ~ 34.292 >> /215 (72)
          parseTime = 0/ << 58.042 ~ 226.084 >> /1454 (72)
          maxCellSize = 1@$LEMMA_PHRASE:0:1/ << 1 ~ 0 >> /1@$LEMMA_PHRASE:0:1 (72)
          fallOffBeam = 0/ << 0 ~ 0 >> /0 (72)
          totalDerivs = 76/ << 2873.264 ~ 7132.551 >> /47224 (72)
          numOfFeaturizedDerivs = 76/ << 2873.264 ~ 7132.551 >> /47224 (72)
        }
      } [4.2s, cum. 4.2s]
      StopWatchSet {
        FeatureExtractor.extractLocal	0.045s (0.0s x 206875)
        SelectFn	0.012s (0.0s x 4925)
        JoinFn	0.011s (0.0s x 7789)
        Executor.execute	0.003s (0.0s x 10)
        Parser.parse	4.1s (0.058s x 72)
      }
      StopWatchSet {
        FeatureExtractor.extractLocal	0.045s (0.0s x 206875)
        SelectFn	0.012s (0.0s x 4925)
        JoinFn	0.011s (0.0s x 7789)
        Executor.execute	0.003s (0.0s x 10)
        Parser.parse	4.1s (0.058s x 72)
      }
    } [4.2s, cum. 4.2s]
  } [4.2s, cum. 4.5s]
  Enter an utterance to parse or one of the following commands:
    (help): show this help message
    (status): prints out status of the system
    (get |option|): get a command-line option (e.g., (get Parser.verbose))
    (set |option| |value|): set a command-line option (e.g., (set Parser.verbose 5))
    (reload): reload the grammar/parameters
    (grammar): prints out the grammar
    (params [|file|]): dumps all the model parameters
    (select |candidate index|): show information about the |index|-th candidate of the last utterance.
    (accept |candidate index|): record the |index|-th candidate as the correct answer for the last utterance.
    (answer |answer|): record |answer| as the correct answer for the last utterance (e.g., (answer (list (number 3)))).
    (rule |lhs| (|rhs_1| ... |rhs_k|) |sem|): adds a rule to the grammar (e.g., (rule $Number ($TOKEN) (NumberFn)))
    (type |logical form|): perform type inference (e.g., (type (number 3)))
    (execute |logical form|): execute the logical form (e.g., (execute (call + (number 3) (number 4))))
    (def |key| |value|): define a macro to replace |key| with |value| in all commands (e.g., (def type fb:type.object type)))
    (context [(user |user|) (date |date|) (exchange |exchange|) (graph |graph|)]): prints out or set the context
  Press Ctrl-D to exit.
> } [35m17s]
